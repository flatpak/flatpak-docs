# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, 2018, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-26 16:32-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../multiarch.rst:2
msgid "Multiarch support"
msgstr ""

#: ../../multiarch.rst:4
msgid ""
"Flatpak has multiarch/multilib support, but it's not enabled by default "
"and require some additional steps to enable it. This section covers "
"enabling multiarch/multilib in your application bundle."
msgstr ""

#: ../../multiarch.rst:9
msgid "Running 32-bit programs"
msgstr ""

#: ../../multiarch.rst:11
msgid ""
"In order to set up the run time environment for 32-bit executables, first"
" you'll need to allow it in ``finish-args``:"
msgstr ""

#: ../../multiarch.rst:19
msgid ""
"This is enough for static binaries, but most real-world GNU/Linux "
"programs are linked dynamically. Those need some shared libraries to "
"work."
msgstr ""

#: ../../multiarch.rst:22
msgid ""
"Freedesktop.org and GNOME SDKs both provide a special flatpak extension "
"with a set of libraries for corresponding architecture. This extension "
"can be attached to an app of different architecture. In order to enable "
"the extension for your app, define an extension point for it in the app "
"manifest:"
msgstr ""

#: ../../multiarch.rst:40
msgid "For GNOME runtime, use ``org.gnome.Platform.Compat.i386`` instead."
msgstr ""

#: ../../multiarch.rst:42
msgid ""
"Note that this extension ``version`` must match the ``runtime-version`` "
"of the application."
msgstr ""

#: ../../multiarch.rst:45
msgid ""
"If the 32-bit programs make use of GPU acceleration, or have some "
"graphical UI in general, you'll also need 32-bit GL drivers. Add an "
"extension point for it:"
msgstr ""

#: ../../multiarch.rst:91
msgid ""
"Note that the ``x-gl-versions`` property here must contain both ``1.4`` "
"and the same value as in ``runtime-version``."
msgstr ""

#: ../../multiarch.rst:94
msgid ""
"Make sure to create directories where the extensions will be mounted (the"
" mount points are specified in ``directory`` properties and are relative "
"to the app bundle mount point, i.e. to ``/app/``). This can be done at "
"stage of the build."
msgstr ""

#: ../../multiarch.rst:98
msgid ""
"Finally, you need to make the dynamic library loader know the paths to "
"32-bit libraries. In order to do this, you can install a "
"``/app/etc/ld.so.conf`` file with contents like this:"
msgstr ""

#: ../../multiarch.rst:107
msgid ""
"Here ``/app/lib32`` is the directory where you install additional 32-bit "
"libraries, if any."
msgstr ""

#: ../../multiarch.rst:110
msgid "You can combine the above two steps in a special module, e.g."
msgstr ""

#: ../../multiarch.rst:132
msgid "Building 32-bit modules"
msgstr ""

#: ../../multiarch.rst:134
msgid ""
"The section above describes how to run 32-bit programs that are already "
"built. This section will describe the process of building 32-bit "
"components yourself to ship them with the application. It assumes that "
"you are already familiar with building (single-arch) flatpaks. If not, "
"please refer to :doc:`flatpak-builder` guide first."
msgstr ""

#: ../../multiarch.rst:140
msgid "First of all, you'll need to enable some SDK extensions at build time:"
msgstr ""

#: ../../multiarch.rst:148
msgid ""
"The first one is the 32-bit portion of the SDK, containing 32-bit "
"libraries and development files."
msgstr ""

#: ../../multiarch.rst:151
msgid ""
"The second one is a cross-compiler. Usually ``gcc -m32`` is used for "
"multilib builds, but the flatpak SDK comes with gcc without multilib "
"support. Thus, you will need a cross-compiler for building x86 on x86_64 "
"just as you would need it for any foreign architecture like aarch64."
msgstr ""

#: ../../multiarch.rst:156
msgid ""
"In order to build a 32-bit module, some global build options needs to be "
"overridden. Examples here assume that 32-bit libraries are installed in "
"``/app/lib32`` directory:"
msgstr ""

#: ../../multiarch.rst:178
msgid ""
"These ``build-options`` need to be set for each 32-bit module. If your "
"app manifest is in YAML format, the YAML anchors can come in handy and "
"save you from copy-pasting the same snippet. You can define the 32-bit "
"``build-options`` object somewhere in the manifest, add an anchor to it, "
"and then point each 32-bit modules' ``build-options`` to that anchor:"
msgstr ""

#: ../../multiarch.rst:202
msgid ""
"Of course, in order to actually use 32-bit modules you've build, you'll "
"also need all the same setup from the previous section."
msgstr ""

#~ msgid ""
#~ "Note that the ``versions`` property here"
#~ " must contain both ``1.4`` and the"
#~ " same value as in ``runtime-"
#~ "version``."
#~ msgstr ""

