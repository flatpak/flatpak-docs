# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, 2018, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# TingPing <tingping@tingping.se>, 2018. #zanata
msgid ""
msgstr ""
"Project-Id-Version:  Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-19 19:25+0530\n"
"PO-Revision-Date: 2018-05-20 10:37-0400\n"
"Last-Translator: Copied by Zanata <copied-by-zanata@zanata.org>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../conventions.rst:2
msgid "Requirements & Conventions"
msgstr ""

#: ../../conventions.rst:4
msgid ""
"Flatpak deliberately imposes very few requirements on applications. "
"However, a small number of standard Linux desktop conventions are "
"expected, primarily to ensure that applications integrate with Linux "
"desktops and app centers. Developers might also encounter a small number "
"of Linux technical conventions."
msgstr ""

#: ../../conventions.rst:10
msgid ""
"Information on additional desktop integration options can be found in "
":doc:`desktop-integration`."
msgstr ""

#: ../../conventions.rst:14
msgid "Expected Standards"
msgstr ""

#: ../../conventions.rst:16
msgid ""
"Applications using Flatpak are generally expected to comply with the "
"following standards. Applications that have previously targeted the Linux"
" desktop will typically need to make very few (if any) changes to meet "
"these requirements."
msgstr ""

#: ../../conventions.rst:21
msgid "Application IDs"
msgstr ""

#: ../../conventions.rst:23
msgid ""
"As described in :doc:`using-flatpak`, Flatpak requires each application "
"to have a unique identifier, which follows a format such as "
"``org.example.app``."
msgstr ""

#: ../../conventions.rst:26
msgid ""
"The format is in reverse-DNS style, meaning the first section should be a"
" domain controlled by the project, while the trailing section represents "
"the specific project. There are exceptions to this, such as extensions, "
"which use the base application-id of the project they extend rather than "
"their own."
msgstr ""

#: ../../conventions.rst:31
msgid ""
"As will be seen below and in future sections, this ID is expected to be "
"used in a number of places. Developers must follow the standard `D-Bus "
"naming conventions for bus names <https://dbus.freedesktop.org/doc/dbus-"
"specification.html#message-protocol-names>`_ when creating their own IDs."
" This format is already recommended by the `Desktop File specification "
"<https://specifications.freedesktop.org/desktop-entry-spec/latest/file-"
"naming.html>`_ and also the `Appstream specification "
"<https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html"
"#sect-Metadata-GenericComponent>`_."
msgstr ""

#: ../../conventions.rst:40
msgid "Here are some practical examples of poor ID choices:"
msgstr ""

#: ../../conventions.rst:42
msgid "``org.example.desktop``"
msgstr ""

#: ../../conventions.rst:44
msgid ""
"This ID is problematic because the Appstream standard, for legacy "
"reasons, treats IDs ending with ``.desktop`` as a special case, leading "
"to inconsistency. For the same reason, ``.Desktop`` suffixes should not "
"be used for newly named applications. Don't hesitate to repeat the "
"application name even if it is already part of the domain name section of"
" the identifier (e.g. ``org.example.Example``)."
msgstr ""

#: ../../conventions.rst:49
msgid "``io.github.foo``"
msgstr ""

#: ../../conventions.rst:51
msgid ""
"This is problematic because while ``foo.github.io`` may be unique to your"
" project, it does not include a project-specific identifier. For "
"instance, if another project creates ``io.github.foo-bar``, issues can "
"arise since the two IDs would then be treated as similar by ``flatpak`` "
"(even though they deserve to be treated as different namespaces). A "
"better ID would be ``io.github.foo.foo``, even if the second ``foo`` "
"seems redundant."
msgstr ""

#: ../../conventions.rst:58
msgid "``org.example-site.foo``"
msgstr ""

#: ../../conventions.rst:60
msgid ""
"This ID is not valid according to the D-Bus specification, as the dash "
"``-`` isn't allowed except in the last component. You should replace the "
"dash with an underscore ``_``, and thus use ``org.example_site.Foo`` "
"instead."
msgstr ""

#: ../../conventions.rst:65
msgid "``com.github.foo.bar`` or ``com.gitlab.foo.bar``"
msgstr ""

#: ../../conventions.rst:67
msgid ""
"While a project may be hosted on GitHub or GitLab, it does not have "
"control over the ``github.com`` or ``gitlab.com`` domains. Instead, you "
"should use ``io.github`` or ``io.gitlab`` as shown above."
msgstr ""

#: ../../conventions.rst:72
msgid "``Org.Example.App``"
msgstr ""

#: ../../conventions.rst:74
msgid ""
"The domain portion of the ID must be in lowercase, and while not "
"required, the application portion is recommended to be in lowercase as "
"well. Therefore, you should use ``org.example.app``."
msgstr ""

#: ../../conventions.rst:79
msgid "MetaInfo files"
msgstr ""

#: ../../conventions.rst:81
msgid ""
"MetaInfo files provide metadata about applications, which is used by "
"application stores (such as Flathub, GNOME Software and KDE Discover)."
msgstr ""

#: ../../conventions.rst:85
msgid ""
"The `Freedesktop AppStream specification "
"<https://www.freedesktop.org/software/appstream/docs/>`_ provides a "
"complete reference for providing MetaInfo. You can use the online "
"`AppStream MetaInfo Creator "
"<https://www.freedesktop.org/software/appstream/metainfocreator/>`_ to "
"generate a basic file."
msgstr ""

#: ../../conventions.rst:91
msgid ""
"MetaInfo files should be named using the application ID, must end with "
"the ``.metainfo.xml`` file extension, and must be placed in "
"``/app/share/metainfo/``. For example::"
msgstr ""

#: ../../conventions.rst:96
msgid ""
"A legacy convention allows for placing the ``.appdata.xml`` file in "
"``/app/share/appdata``. ``flatpak-builder`` will check either directory "
"for its respective extension."
msgstr ""

#: ../../conventions.rst:100
msgid ""
"The ``appstreamcli validate --explain`` command can be used to check "
"MetaInfo files for errors."
msgstr ""

#: ../../conventions.rst:104
msgid "Application icons"
msgstr ""

#: ../../conventions.rst:106
msgid ""
"Applications are expected to provide an application icon, which is used "
"for their application launcher. These icons should be provided in "
"accordance with the `Freedesktop icon specification "
"<https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-"
"latest.html>`_."
msgstr ""

#: ../../conventions.rst:111
msgid ""
"Icons must be named using the application's ID, be in either PNG or SVG "
"format, and must be placed in the standard location::"
msgstr ""

#: ../../conventions.rst:116
msgid ""
"For example, the path to the 128âœ•128px version of GNOME Dictionary's icon"
" is::"
msgstr ""

#: ../../conventions.rst:121
msgid ""
"Icons must be square-shaped, meaning their width and height must be the "
"same. The maximum size allowed by the specification is 512x512px. SVG "
"icons are of size ``scalable``::"
msgstr ""

#: ../../conventions.rst:127
msgid ""
"Flatpak will export the following icon name patterns: ``$FLATPAK_ID``, "
"``$FLATPAK_ID.foo``, ``$FLATPAK_ID-foo``. They may end with an extension "
"suffix like ``.png`` or ``.svg``. Exported icons can be found in the "
"``icons`` subfolder of either "
"``$HOME/.local/share/flatpak/exports/share`` or "
"``/var/lib/flatpak/exports/share``, depending on whether it's a system or"
" user install."
msgstr ""

#: ../../conventions.rst:133
msgid ""
"The distribution usually appends those paths to ``$XDG_DATA_DIRS`` on the"
" host when installing the ``flatpak`` package. Unless an icon is exported"
" by Flatpak, host applications cannot access it."
msgstr ""

#: ../../conventions.rst:138
msgid "Desktop files"
msgstr ""

#: ../../conventions.rst:140
msgid ""
"Desktop files are used to provide the desktop environment with "
"information about each application. The `Freedesktop specification "
"<https://specifications.freedesktop.org/desktop-entry-spec/latest/>`_ "
"provides a complete reference for writing desktop files."
msgstr ""

#: ../../conventions.rst:145
msgid ""
"Desktop files must be named using the application's ID, followed by the "
"``.desktop`` file extension, and must be placed in "
"``/app/share/applications/``. For example::"
msgstr ""

#: ../../conventions.rst:151
msgid ""
"A minimal desktop file should contain at least the application's *name*, "
"*exec* command, *type*, *icon* name and *categories*::"
msgstr ""

#: ../../conventions.rst:161
msgid ""
"The ``desktop-file-validate`` command can be used to check for errors in "
"desktop files."
msgstr ""

#: ../../conventions.rst:164
msgid ""
"The ``Exec`` key of the desktop files is rewritten by Flatpak when "
"installing an app. The original value of the key becomes the value of the"
" ``--command`` argument like so::"
msgstr ""

#: ../../conventions.rst:170
msgid ""
"Flatpak will export the following desktop filename patterns: "
"``$FLATPAK_ID.desktop``, ``$FLATPAK_ID.foo.desktop``, ``$FLATPAK_ID-"
"foo.desktop``. Exported desktop files can be found in the "
"``applications`` subfolder of either "
"``$HOME/.local/share/flatpak/exports/share`` or "
"``/var/lib/flatpak/exports/share``, depending on whether it's a system or"
" user install."
msgstr ""

#: ../../conventions.rst:177
msgid ""
"The distribution usually appends those paths to ``$XDG_DATA_DIRS`` on the"
" host when installing the ``flatpak`` package. Unless a desktop file is "
"exported by Flatpak, host applications cannot access it."
msgstr ""

#: ../../conventions.rst:182
msgid ""
"The metainfo file along with the other metadata such as icon and desktop "
"files is composed into a catalogue by ``appstream``. Since 1.3.4, Flatpak"
" Builder by default uses ``appstreamcli`` from `libappstream "
"<https://github.com/ximion/appstream/>`_ to compose this and executes the"
" following command::"
msgstr ""

#: ../../conventions.rst:190
#, python-brace-format
msgid ""
"``${FLATPAK_ID}`` is the Flatpak application ID and ``${FLATPAK_DEST}`` "
"is set to ``/app`` for apps and ``/usr`` for runtimes. The ``media-"
"baseurl`` controls the base URL used for mirroring screenshots. Usually "
"each app store will have their own base URL for this. On Flathub this is "
"set to ``https://dl.flathub.org/media/``."
msgstr ""

#: ../../conventions.rst:197
msgid "Technical conventions"
msgstr ""

#: ../../conventions.rst:199
msgid ""
"The following are standard technical conventions used by Flatpak and "
"Linux desktops. Those with Linux experience will likely already be aware "
"of them. However, developers who are new to Linux might find some of this"
" information useful."
msgstr ""

#: ../../conventions.rst:205
msgid "D-Bus"
msgstr ""

#: ../../conventions.rst:207
msgid ""
"D-Bus is the standard IPC framework used on Linux desktops. A lot of "
"applications won't need to use it, but it is supported by Flatpak should "
"it be required."
msgstr ""

#: ../../conventions.rst:211
msgid ""
"D-Bus can be used for application launching and communicating with some "
"system services. Applications can also provide their own D-Bus services "
"(when doing this, the D-Bus service name is expected to be the same as "
"the application ID)."
msgstr ""

#: ../../conventions.rst:216
msgid "Filesystem layout"
msgstr ""

#: ../../conventions.rst:218
msgid ""
"Each Flatpak sandbox, which is the environment in which an application is"
" run, contains the filesystem of the application's runtime. This follows "
"`standard Linux filesystem conventions "
"<https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard>`_."
msgstr ""

#: ../../conventions.rst:223
msgid ""
"For example, the root of the sandbox contains the ``/etc`` directory for "
"configuration files and ``/usr`` for multi-user utilities and "
"applications. In addition to these, each sandbox contains a top-level "
"``/app`` directory, which is where the application's own files are "
"located."
msgstr ""

#: ../../conventions.rst:229
msgid "XDG base directories"
msgstr ""

#: ../../conventions.rst:231
msgid ""
"`XDG base directories <https://specifications.freedesktop.org/basedir-"
"spec/basedir-spec-latest.html>`_ are standard locations for user-specific"
" application data. Popular toolkits provide convenience functions for "
"accessing XDG base directories. These include:"
msgstr ""

#: ../../conventions.rst:236
msgid "Electron: XDG base directories can be accessed with ``app.getPath``."
msgstr ""

#: ../../conventions.rst:237
msgid ""
"Glib: XDG base directories can be accessed through the "
"``g_get_user_cache_dir ()``, ``g_get_user_data_dir ()``, "
"``g_get_user_config_dir ()`` functions."
msgstr ""

#: ../../conventions.rst:240
msgid ""
"Qt: XDG base directories can be accessed with the `QStandardPaths Class "
"<https://doc.qt.io/qt-5/qstandardpaths.html>`_."
msgstr ""

#: ../../conventions.rst:243
msgid ""
"However, applications that aren't using one of these toolkits can expect "
"to find their XDG base directories in the following locations:"
msgstr ""

#: ../../conventions.rst:247
msgid "Base directory"
msgstr ""

#: ../../conventions.rst:247
msgid "Usage"
msgstr ""

#: ../../conventions.rst:247
msgid "Default location"
msgstr ""

#: ../../conventions.rst:249
msgid "XDG_CONFIG_HOME"
msgstr ""

#: ../../conventions.rst:249
msgid "User-specific configuration files"
msgstr ""

#: ../../conventions.rst:249
msgid "~/.var/app/<app-id>/config"
msgstr ""

#: ../../conventions.rst:250
msgid "XDG_DATA_HOME"
msgstr ""

#: ../../conventions.rst:250
msgid "User-specific data"
msgstr ""

#: ../../conventions.rst:250
msgid "~/.var/app/<app-id>/data"
msgstr ""

#: ../../conventions.rst:251
msgid "XDG_CACHE_HOME"
msgstr ""

#: ../../conventions.rst:251
msgid "Non-essential user-specific data"
msgstr ""

#: ../../conventions.rst:251
msgid "~/.var/app/<app-id>/cache"
msgstr ""

#: ../../conventions.rst:252
msgid "XDG_STATE_HOME"
msgstr ""

#: ../../conventions.rst:252
msgid "State data such as undo history"
msgstr ""

#: ../../conventions.rst:252
msgid "~/.var/app/<app-id>/.local/state"
msgstr ""

#: ../../conventions.rst:255
msgid "For example, GNOME Dictionary will store user-specific data in::"
msgstr ""

#: ../../conventions.rst:259
msgid ""
"These environment variables are always set by Flatpak and override any "
"host values. However, if access to directories on the host is needed, the"
" ``$HOST_XDG_CONFIG_HOME``, ``$HOST_XDG_DATA_HOME``, "
"``$HOST_XDG_CACHE_HOME``, and ``$HOST_XDG_STATE_HOME`` environment "
"variables will be set if they are also available on the host."
msgstr ""

#: ../../conventions.rst:264
msgid ""
"Note that ``$XDG_STATE_HOME`` and ``$HOST_XDG_STATE_HOME`` are only "
"supported by Flatpak 1.13 and later. If your application needs to work on"
" earlier versions of Flatpak, you can use the ``--persist=.local/state`` "
"and ``--unset-env=XDG_STATE_HOME`` finish args, ensuring the app will use"
" the correct directory, even after Flatpak is later upgraded to version "
">1.13."
msgstr ""

#: ../../conventions.rst:270
msgid ""
"Also, note that applications can be configured to use non-default base "
"directory locations (see :doc:`sandbox-permissions`)."
msgstr ""

#~ msgid ""
#~ "As described in :doc:`using-flatpak`, "
#~ "Flatpak requires each application to "
#~ "have a unique identifier, which has "
#~ "a three-part form such as "
#~ "``org.gnome.Dictionary``. As will be seen "
#~ "below and in future sections, this "
#~ "ID is expected to be used in "
#~ "a number of places. Developers should"
#~ " follow the standard `D-Bus naming "
#~ "conventions <https://dbus.freedesktop.org/doc/dbus-"
#~ "specification.html#message-protocol-names>`_ when"
#~ " creating their own IDs. This format"
#~ " is already recommended by the "
#~ "`Desktop File specification  "
#~ "<https://specifications.freedesktop.org/desktop-entry-spec"
#~ "/desktop-entry-spec-latest.html#file-naming>`_"
#~ " and `Appstream specification  "
#~ "<https://www.freedesktop.org/software/appstream/docs/chap-"
#~ "Metadata.html#sect-Metadata-GenericComponent>`_ "
#~ "also."
#~ msgstr ""

#~ msgid ""
#~ "Qt: provides access to XDG base "
#~ "directories with the the `QStandardPaths "
#~ "Class <http://doc.qt.io/qt-5/qstandardpaths.html>`_"
#~ msgstr ""

#~ msgid ""
#~ "As described in :doc:`using-flatpak`, "
#~ "Flatpak requires each application to "
#~ "have a unique identifier, which has "
#~ "a form such as ``org.gnome.Dictionary``. "
#~ "The format is in reverse-DNS style"
#~ " so the first section is a "
#~ "domain controlled by the project and "
#~ "the trailing section represents the "
#~ "specific project. As will be seen "
#~ "below and in future sections, this "
#~ "ID is expected to be used in "
#~ "a number of places. Developers must "
#~ "follow the standard `D-Bus naming "
#~ "conventions <https://dbus.freedesktop.org/doc/dbus-"
#~ "specification.html#message-protocol-names>`_ when"
#~ " creating their own IDs. This format"
#~ " is already recommended by the "
#~ "`Desktop File specification "
#~ "<https://specifications.freedesktop.org/desktop-entry-spec"
#~ "/desktop-entry-spec-latest.html#file-naming>`_"
#~ " and `Appstream specification "
#~ "<https://www.freedesktop.org/software/appstream/docs/chap-"
#~ "Metadata.html#sect-Metadata-GenericComponent>`_ "
#~ "also."
#~ msgstr ""

#~ msgid ""
#~ "This is problematic because while "
#~ "``foo.github.io`` may be unique to your"
#~ " project it does not include a "
#~ "project specific identifier. This may "
#~ "cause issues if another project creates"
#~ " ``io.github.Foo-Bar`` which should be "
#~ "its own namespace but areas of "
#~ "``flatpak`` may treat them similar. A"
#~ " better ID would be ``io.github.foo.Foo``"
#~ " even if its redundant."
#~ msgstr ""

#~ msgid ""
#~ "AppData files should be named with "
#~ "the application ID and the "
#~ "``.appdata.xml`` file extension, and should"
#~ " be placed in ``/app/share/metainfo/``. For"
#~ " example::"
#~ msgstr ""

#~ msgid ""
#~ "Applications are expected to provide an"
#~ " application icon, which is used for"
#~ " their application launcher. These icons"
#~ " should be provided in accordance "
#~ "with the `Freedesktop icon specification "
#~ "<https://standards.freedesktop.org/icon-theme-spec"
#~ "/icon-theme-spec-latest.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "Desktop files are used to provide "
#~ "the desktop environment with information "
#~ "about each application. The `Freedesktop "
#~ "specification <https://standards.freedesktop.org/desktop-"
#~ "entry-spec/latest/>`_ provides a complete "
#~ "reference for writing desktop files, and"
#~ " `additional information about them "
#~ "<https://wiki.archlinux.org/index.php/desktop_entries>`_ is "
#~ "available online."
#~ msgstr ""

#~ msgid ""
#~ "`XDG base directories "
#~ "<https://standards.freedesktop.org/basedir-spec/basedir-"
#~ "spec-latest.html>`_ are standard locations "
#~ "for user-specific application data. "
#~ "Popular toolkits provide convenience functions"
#~ " for accessing XDG base directories. "
#~ "These include:"
#~ msgstr ""

#~ msgid ""
#~ "Qt: provides access to XDG base "
#~ "directories with the `QStandardPaths Class "
#~ "<http://doc.qt.io/qt-5/qstandardpaths.html>`_"
#~ msgstr ""

#~ msgid "``com.github.foo.Bar``"
#~ msgstr ""

#~ msgid ""
#~ "While a project may be hosted on"
#~ " GitHub it does not have any "
#~ "control over the ``github.com`` domain. "
#~ "Instead you should use ``io.github`` as"
#~ " shown above."
#~ msgstr ""

#~ msgid ""
#~ "AppData files provide metadata about "
#~ "applications, which is used by "
#~ "application stores (such as Flathub, "
#~ "GNOME Software and KDE Discover). The"
#~ " `Freedesktop AppStream specification "
#~ "<https://www.freedesktop.org/software/appstream/docs/>`_ "
#~ "provides a complete reference for "
#~ "providing AppData."
#~ msgstr ""

#~ msgid ""
#~ "As described in :doc:`using-flatpak`, "
#~ "Flatpak requires each application to "
#~ "have a unique identifier, which has "
#~ "a form such as ``org.gnome.Dictionary``."
#~ msgstr ""

#~ msgid ""
#~ "As will be seen below and in "
#~ "future sections, this ID is expected "
#~ "to be used in a number of "
#~ "places. Developers must follow the "
#~ "standard `D-Bus naming conventions for "
#~ "bus names <https://dbus.freedesktop.org/doc/dbus-"
#~ "specification.html#message-protocol-names>`_ when"
#~ " creating their own IDs. This format"
#~ " is already recommended by the "
#~ "`Desktop File specification "
#~ "<https://specifications.freedesktop.org/desktop-entry-spec"
#~ "/desktop-entry-spec-latest.html#file-naming>`_"
#~ " and `Appstream specification "
#~ "<https://www.freedesktop.org/software/appstream/docs/chap-"
#~ "Metadata.html#sect-Metadata-GenericComponent>`_ "
#~ "also."
#~ msgstr ""

#~ msgid "``io.github.Foo``"
#~ msgstr ""

#~ msgid ""
#~ "This is problematic because while "
#~ "``foo.github.io`` may be unique to your"
#~ " project, it does not include a "
#~ "project-specific identifier. This may "
#~ "cause issues if another project creates"
#~ " ``io.github.Foo-Bar`` which should be "
#~ "its own namespace but areas of "
#~ "``flatpak`` may treat them similar. A"
#~ " better ID would be ``io.github.foo.Foo``"
#~ " even if it is redundant."
#~ msgstr ""

#~ msgid "``org.example-site.Foo``"
#~ msgstr ""

#~ msgid ""
#~ "This ID is not valid according to"
#~ " the DBus specification. You can use"
#~ " ``org.example_site.Foo`` instead."
#~ msgstr ""

#~ msgid "``com.github.foo.Bar`` or ``com.gitlab.foo.Bar``"
#~ msgstr ""

#~ msgid "AppData files"
#~ msgstr ""

#~ msgid ""
#~ "AppData files provide metadata about "
#~ "applications, which is used by "
#~ "application stores (such as Flathub, "
#~ "GNOME Software and KDE Discover)."
#~ msgstr ""

#~ msgid ""
#~ "The `Freedesktop AppStream specification "
#~ "<https://www.freedesktop.org/software/appstream/docs/>`_ "
#~ "provides a complete reference for "
#~ "providing AppData. You can use the "
#~ "online `AppStream MetaInfo Creator "
#~ "<https://www.freedesktop.org/software/appstream/metainfocreator/>`_"
#~ " to generate a basic file."
#~ msgstr ""

#~ msgid ""
#~ "AppData files should be named with "
#~ "the application ID and the "
#~ "``.metainfo.xml`` file extension, and should"
#~ " be placed in ``/app/share/metainfo/``. For"
#~ " example::"
#~ msgstr ""

#~ msgid ""
#~ "The ``appstream-util validate-relax`` "
#~ "command can be used to check "
#~ "AppData files for errors."
#~ msgstr ""

#~ msgid ""
#~ "Desktop files are used to provide "
#~ "the desktop environment with information "
#~ "about each application. The `Freedesktop "
#~ "specification <https://specifications.freedesktop.org"
#~ "/desktop-entry-spec/latest/>`_ provides a "
#~ "complete reference for writing desktop "
#~ "files, and `additional information about "
#~ "them <https://wiki.archlinux.org/title/desktop_entries>`_ "
#~ "is available online."
#~ msgstr ""

#~ msgid "Exporting through extra-data"
#~ msgstr ""

#~ msgid ""
#~ "Files downloaded through ``extra-data`` "
#~ "are only downloaded when installing, as"
#~ " such they aren't yet available for"
#~ " ``flatpak-builder`` to automatically "
#~ "export during the build process."
#~ msgstr ""

#~ msgid ""
#~ "When using ``extra-data``, place any "
#~ "files that must be exported under "
#~ "this location::"
#~ msgstr ""

#~ msgid ""
#~ "For example, if GNOME Dictionary used"
#~ " ``extra-data`` to download a 96x96"
#~ " icon this would be its path::"
#~ msgstr ""

#~ msgid ""
#~ "Note that ``$XDG_STATE_HOME`` is only "
#~ "supported by Flatpak 1.13 and later. "
#~ "If your app needs to work on "
#~ "earlier versions of Flatpak, you can "
#~ "use the ``--persist=.local/state`` and "
#~ "``--unset-env=XDG_STATE_HOME`` finish args so "
#~ "the app will use the correct "
#~ "directory, even after Flatpak is later"
#~ " upgraded to >1.13."
#~ msgstr ""

#~ msgid ""
#~ "Flatpak deliberately makes as few "
#~ "requirements of applications as possible. "
#~ "However, a small number of standard "
#~ "Linux desktop conventions are expected, "
#~ "primarily to ensure that applications "
#~ "integrate with Linux desktops and app"
#~ " centers. Developers might also encounter"
#~ " a small number of Linux technical"
#~ " conventions."
#~ msgstr ""

#~ msgid ""
#~ "Information on further desktop integration "
#~ "options can be found in :doc"
#~ ":`desktop-integration`."
#~ msgstr ""

#~ msgid ""
#~ "Applications that use Flatpak are "
#~ "generally expected to comply with the"
#~ " following standards. Applications that "
#~ "have previously targeted the Linux "
#~ "desktop will typically need to make "
#~ "very few (if any) changes to do"
#~ " this."
#~ msgstr ""

#~ msgid ""
#~ "As described in :doc:`using-flatpak`, "
#~ "Flatpak requires each application to "
#~ "have a unique identifier, which has "
#~ "a form such as ``org.example.app``."
#~ msgstr ""

#~ msgid ""
#~ "The format is in reverse-DNS style"
#~ " so the first section should be "
#~ "a domain controlled by the project "
#~ "and the trailing section represents the"
#~ " specific project. There are some "
#~ "exceptions to this, such as extensions"
#~ " using the base application-id of "
#~ "the project they extend rather than "
#~ "their own."
#~ msgstr ""

#~ msgid ""
#~ "As will be seen below and in "
#~ "future sections, this ID is expected "
#~ "to be used in a number of "
#~ "places. Developers must follow the "
#~ "standard `D-Bus naming conventions for "
#~ "bus names <https://dbus.freedesktop.org/doc/dbus-"
#~ "specification.html#message-protocol-names>`_ when"
#~ " creating their own IDs. This format"
#~ " is already recommended by the "
#~ "`Desktop File specification "
#~ "<https://specifications.freedesktop.org/desktop-entry-"
#~ "spec/latest/file-naming.html>`_ and `Appstream "
#~ "specification "
#~ "<https://www.freedesktop.org/software/appstream/docs/chap-"
#~ "Metadata.html#sect-Metadata-GenericComponent>`_ "
#~ "also."
#~ msgstr ""

#~ msgid "For some practical examples of bad IDs"
#~ msgstr ""

#~ msgid ""
#~ "This is a bad ID because the "
#~ "Appstream standard for legacy reasons "
#~ "treats IDs ending with ``.desktop`` as"
#~ " a special case causing inconsistency. "
#~ "For this same reason, ``.Desktop`` "
#~ "suffixes should not be used for "
#~ "newly named applications. Don't hesitate "
#~ "to repeat the application name even "
#~ "if it already is part of the "
#~ "domain name section of the identifier"
#~ " (eg. ``org.example.Example``)."
#~ msgstr ""

#~ msgid ""
#~ "This is problematic because while "
#~ "``foo.github.io`` may be unique to your"
#~ " project, it does not include a "
#~ "project-specific identifier. This may "
#~ "cause issues if another project creates"
#~ " ``io.github.foo-bar`` which should be "
#~ "its own namespace but areas of "
#~ "``flatpak`` may treat them similar. A"
#~ " better ID would be ``io.github.foo.foo``"
#~ " even if it is redundant."
#~ msgstr ""

#~ msgid ""
#~ "This ID is not valid according to"
#~ " the DBus specification as a dash "
#~ "``-`` isn't allowed except on the "
#~ "last component. You should replace ``-``"
#~ " with an undercore ``_`` and "
#~ "therefore, use ``org.example_site.Foo`` instead."
#~ msgstr ""

#~ msgid ""
#~ "While a project may be hosted on"
#~ " GitHub or GitLab it does not "
#~ "have any control over the ``github.com``"
#~ " or ``gitlab.com`` domain. Instead you "
#~ "should use ``io.github`` or ``io.gitlab`` "
#~ "as shown above."
#~ msgstr ""

#~ msgid ""
#~ "The TLD portion of the ID must "
#~ "be lowercased and while not required "
#~ "the application portion is recommended "
#~ "to be lowercase as well. Instead "
#~ "you should use ``org.example.app``."
#~ msgstr ""

#~ msgid ""
#~ "MetaInfo files should be named with "
#~ "the application ID and the "
#~ "``.metainfo.xml`` file extension, and should"
#~ " be placed in ``/app/share/metainfo/``. For"
#~ " example::"
#~ msgstr ""

#~ msgid ""
#~ "A legacy convention of having the "
#~ "``.appdata.xml`` installed in ``/app/share/appdata``"
#~ " is also accepted as well, and "
#~ "``flatpak-builder`` will check either "
#~ "directory with either extension."
#~ msgstr ""

#~ msgid ""
#~ "Icons should be named with the "
#~ "application's ID, be in either PNG "
#~ "or SVG format, and must be placed"
#~ " in the standard location::"
#~ msgstr ""

#~ msgid ""
#~ "Icons must be square shaped, ie "
#~ "their width and height must be the"
#~ " same. The maximum size allowed by"
#~ " the specification is 512x512px. SVG "
#~ "icons are of size ``scalable``::"
#~ msgstr ""

#~ msgid ""
#~ "Flatpak will export the following icon"
#~ " name patterns: ``$FLATPAK_ID, $FLATPAK_ID.foo,"
#~ " $FLATPAK_ID-foo``. They may end with"
#~ " an extension suffix like ``.png, "
#~ ".svg``. Exported icons can be found "
#~ "in the ``icons`` subfolder of "
#~ "``$HOME/.local/share/flatpak/exports/share`` or "
#~ "``/var/lib/flatpak/exports/share`` depending on "
#~ "system or user install."
#~ msgstr ""

#~ msgid ""
#~ "The distribution usually appends those "
#~ "paths to ``$XDG_DATA_DIRS`` on host when"
#~ " installing the ``flatpak`` package. Unless"
#~ " an icon is exported by Flatpak, "
#~ "host applications cannot access it."
#~ msgstr ""

#~ msgid ""
#~ "Desktop files should be named with "
#~ "the application's ID, followed by the"
#~ " ``.desktop`` file extension, and should"
#~ " be placed in ``/app/share/applications/``. "
#~ "For example::"
#~ msgstr ""

#~ msgid ""
#~ "The ``Exec`` key of the desktop "
#~ "files is rewritten by Flatpak  when "
#~ "installing an app. The original value"
#~ " of the key becomes the value "
#~ "of the ``--command`` argument like so::"
#~ msgstr ""

#~ msgid ""
#~ "Flatpak will export the following "
#~ "desktop filename patterns: ``$FLATPAK_ID.desktop,"
#~ " $FLATPAK_ID.foo.desktop, $FLATPAK_ID-foo.desktop``."
#~ " Exported desktop files can be found"
#~ " in the ``applications`` subfolder of "
#~ "``$HOME/.local/share/flatpak/exports/share`` or "
#~ "``/var/lib/flatpak/exports/share`` depending on "
#~ "system or user install."
#~ msgstr ""

#~ msgid ""
#~ "The distribution usually appends those "
#~ "paths to ``$XDG_DATA_DIRS`` on host when"
#~ " installing the ``flatpak`` package. Unless"
#~ " a desktop file is exported by "
#~ "Flatpak, host applications cannot access "
#~ "it."
#~ msgstr ""

#~ msgid ""
#~ "For example, the root of the "
#~ "sandbox contains the ``/etc`` directory "
#~ "for configuration files and ``/usr`` for"
#~ " multi-user utilities and applications. "
#~ "In addition to this, each sandbox "
#~ "contains a top-level ``/app`` directory,"
#~ " which is where the application's own"
#~ " files are located."
#~ msgstr ""

#~ msgid "Electron: XDG base directories can be accessed with ``app.getPath``"
#~ msgstr ""

#~ msgid ""
#~ "Glib: provides access to the XDG "
#~ "base directories through the "
#~ "``g_get_user_cache_dir ()``, ``g_get_user_data_dir "
#~ "()``, ``g_get_user_config_dir ()`` functions"
#~ msgstr ""

#~ msgid ""
#~ "Qt: provides access to XDG base "
#~ "directories with the `QStandardPaths Class "
#~ "<https://doc.qt.io/qt-5/qstandardpaths.html>`_"
#~ msgstr ""

#~ msgid ""
#~ "These environment variables are always "
#~ "set by flatpak and override any "
#~ "host values. However if using the "
#~ "host directories are needed the "
#~ "``$HOST_XDG_CONFIG_HOME``, ``$HOST_XDG_DATA_HOME``, "
#~ "``$HOST_XDG_CACHE_HOME``, and ``$HOST_XDG_STATE_HOME`` "
#~ "environment variables will be set if "
#~ "a custom value was set on the "
#~ "host."
#~ msgstr ""

#~ msgid ""
#~ "Note that ``$XDG_STATE_HOME`` and "
#~ "``$HOST_XDG_STATE_HOME`` is only supported by"
#~ " Flatpak 1.13 and later. If your "
#~ "app needs to work on earlier "
#~ "versions of Flatpak, you can use "
#~ "the ``--persist=.local/state`` and ``--unset-"
#~ "env=XDG_STATE_HOME`` finish args so the "
#~ "app will use the correct directory, "
#~ "even after Flatpak is later upgraded "
#~ "to >1.13."
#~ msgstr ""

#~ msgid ""
#~ "Note that applications can be configured"
#~ " to use non-default base directory"
#~ " locations (see :doc:`sandbox-permissions`)."
#~ msgstr ""

