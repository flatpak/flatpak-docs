# Brazilian Portuguese translation for electron
# Copyright (C) 2017, 2018, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# Rafael Fontenelle <rafaelff@gnome.org>, 2019-2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Flatpak \n"
"Report-Msgid-Bugs-To: https://github.com/flatpak/flatpak-docs/issues\n"
"POT-Creation-Date: 2025-03-13 09:30+0530\n"
"PO-Revision-Date: 2022-09-29 14:47-0300\n"
"Last-Translator: Rafael Fontenelle <rafaelff@gnome.org>\n"
"Language: pt_BR\n"
"Language-Team: Brazilian Portuguese\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../electron.rst:2
msgid "Electron"
msgstr "Electron"

#: ../../electron.rst:4
#, fuzzy
msgid ""
"Due to the nature of `Electron <https://www.electronjs.org/>`_, building "
"Electron applications as Flatpaks requires a few extra steps compared "
"with other applications. Thankfully, several tools and resources are "
"available which make this much easier."
msgstr ""
"Devido à natureza do Electron, a criação de aplicativos Electron como "
"Flatpaks requer algumas etapas extras em comparação com outros "
"aplicativos. Felizmente, várias ferramentas e recursos estão disponíveis,"
" o que facilita muito isso."

#: ../../electron.rst:9
msgid ""
"This guide provides information on how building Electron applications "
"differs from other applications. It also includes information on the "
"tooling for building Electron applications and how to use it."
msgstr ""
"Este guia fornece informações sobre como a compilação de aplicativos "
"Electron difere de outros aplicativos. Ele também inclui informações "
"sobre as ferramentas para a compilação de aplicativos Electron e como "
"usá-lo."

#: ../../electron.rst:13
msgid ""
"The guide walks through the `manifest file <https://github.com/flathub"
"/electron-sample-app/blob/master/flatpak/org.flathub.electron-sample-"
"app.yml>`_ of the `sample Electron Flatpak application "
"<https://github.com/flathub/electron-sample-app>`_. Before you start, it "
"is a good idea to take a look at this, either online or by downloading "
"the application."
msgstr ""
"O guia percorre o `arquivo de manifesto <https://github.com/flathub"
"/electron-sample-app/blob/master/flatpak/org.flathub.electron-sample-"
"app.yml>`_ do `aplicativo de amostra Electron de Flatpak "
"<https://github.com/flathub/electron-sample-app>`_. Antes de começar, é "
"uma boa ideia dar uma olhada nisso, online ou baixando o aplicativo."

#: ../../electron.rst:22
msgid "Building the sample application"
msgstr "Compilando o aplicativo de amostra"

#: ../../electron.rst:24
msgid ""
"While it isn't strictly necessary, you might want to try building and "
"running the sample application yourself."
msgstr ""
"Embora não seja estritamente necessário, convém tentar compilar e "
"executar o aplicativo de amostra."

#: ../../electron.rst:27
#, fuzzy
msgid ""
"To get setup for the build, download or clone the sample app from GitHub,"
" and navigate to the ``/flatpak`` directory in the terminal. Then to "
"build::"
msgstr ""
"Para obter a configuração para a compilação, baixe ou clone o aplicativo "
"de exemplo no GitHub e navegue até o diretório ``/flatpak`` no terminal. "
"Você também deve instalar o aplicativo base Electron e a extensão de SDK "
"Node.js::"

#: ../../electron.rst:33
msgid "Finally, the application can be run with::"
msgstr "Finalmente, o aplicativo pode ser executado com::"

#: ../../electron.rst:38
msgid "Basic configuration"
msgstr "Configuração básica"

#: ../../electron.rst:40
msgid ""
"The first part of the sample application's manifest specifies the "
"application's ID. It also configures the runtime and SDK:"
msgstr ""
"A primeira parte do manifesto do aplicativo de amostra especifica o ID do"
" aplicativo. Ele também configura o runtime e o SDK:"

#: ../../electron.rst:50
msgid ""
"The Freedesktop runtime is generally the best runtime to use with "
"Electron applications, since it is the most minimal runtime, and other "
"dependencies will be specific to Electron itself."
msgstr ""
"O runtime do Freedesktop é geralmente o melhor runtime para uso com "
"aplicativos Electron, já que ele é o mais mínimo de todos e outras "
"dependências serão específicas do próprio Electron."

#: ../../electron.rst:55
#, fuzzy
msgid "The Electron BaseApp"
msgstr "O aplicativo base Electron"

#: ../../electron.rst:57
#, fuzzy
msgid ""
"Next, the manifest specifies that the Electron BaseApp should be used, by"
" specifying the ``base`` and ``base-version`` properties in the "
"application manifest:"
msgstr ""
"Em seguida, o manifesto especifica que o aplicativo base Electron deve "
"ser usado, especificando as propriedades ``base`` e ``base-version`` no "
"manifesto do aplicativo::"

#: ../../electron.rst:66
#, fuzzy
msgid ""
"BaseApps are described in :doc:`dependencies`. Using the Electron base "
"app is much faster and more convenient than manually building Electron "
"dependencies. It also has the advantage of reducing the amount of "
"duplication on users' machines, since it means that Electron is only "
"saved once on disk."
msgstr ""
"Os aplicativos base estão descritos em :doc:`dependencies`. Usar o "
"aplicativo base Electron é muito mais rápido e mais conveniente do que "
"compilar manualmente as dependências do Electron. Ele também tem a "
"vantagem de reduzir a quantidade de duplicação nas máquinas dos usuários,"
" pois significa que o Electron é salvo apenas uma vez no disco."

#: ../../electron.rst:72
msgid "The Node.js SDK extension"
msgstr "A extensão de SDK Node.js"

#: ../../electron.rst:74
msgid ""
"In order to build Electron-based apps, you need Node.js available at "
"build time. Flathub provides Node.js LTS versions as extensions for the "
"SDK, so you can install one of them and add it in your apps' manifest:"
msgstr ""
"Para criar aplicativos baseados em Electron, você precisa do Node.js "
"disponível no momento da compilação. O Flathub fornece versões LTS do "
"Node.js como extensões para o SDK, para que você possa instalar uma delas"
" e adicioná-la no manifesto de seus aplicativos:"

#: ../../electron.rst:83
msgid "Enable the extension by adding it to ``PATH``:"
msgstr "Habilite a extensão adicionando-a a ``PATH``:"

#: ../../electron.rst:90
msgid ""
"Note that the extension name (last portion of reverse-dns notation, "
"``node18`` in this example) must be the same in ``sdk-extensions`` and "
"``append-path``."
msgstr ""
"Observe que o nome da extensão (última parte da notação de DNS reverso, "
"``node18`` neste exemplo) deve ser o mesmo em ``sdk-extensions`` e "
"``append-path``."

#: ../../electron.rst:94
msgid "Command"
msgstr "Command"

#: ../../electron.rst:96
msgid ""
"The ``command`` property indicates that a script called ``run.sh`` is to "
"be executed to run the application. This will be explained in further "
"detail later."
msgstr ""
"A propriedade ``command`` indica que um script chamado ``run.sh`` deve "
"ser executado para executar o aplicativo. Isso será explicado em mais "
"detalhes posteriormente."

#: ../../electron.rst:105
msgid "Sandbox permissions"
msgstr "Permissões de sandbox"

#: ../../electron.rst:107
#, fuzzy
msgid ""
"The standard sandbox :ref:`sandbox-permissions:Permissions guidelines` "
"also apply to Electron applications. However, Electron's Wayland support "
"is still experimental. So for display access, only X11 should be used as "
"the default configuration. This will make Electron use Xwayland in a "
"Wayland session and nothing else is required."
msgstr ""
"As diretrizes padrão sobre permissões de sandbox se aplicam aos "
"aplicativos Electron. No entanto, o Electron atualmente não possui "
"suporte a Wayland, portanto, para acesso à exibição, apenas o X11 deve "
"ser usado. O aplicativo de amostra também configura o pulseaudio para som"
" e permite o acesso à rede:"

#: ../../electron.rst:113
msgid ""
"The sample app also configures PulseAudio for sound and enables network "
"access:"
msgstr ""

#: ../../electron.rst:126
msgid ""
"To allow experimental `native Wayland` support in Electron>=20, the "
"``--ozone-platform-hint=auto`` flag can be passed to the program. `auto` "
"will choose Wayland when the current session is running under Wayland and"
" Xwayland or X11 otherwise."
msgstr ""

#: ../../electron.rst:131
msgid ""
"It's recommended to leave actually `enabling` Wayland up to the user for "
"now, i.e. set ``--socket=x11`` in the manifest. Wayland can then be "
"tested with::"
msgstr ""

#: ../../electron.rst:137
msgid "Enable native Wayland support by default"
msgstr ""

#: ../../electron.rst:141
msgid ""
"Native Wayland support in Electron is still experimental and often "
"unstable. It is advised to stick with the X11/Xwayland configuration "
"above as the default."
msgstr ""

#: ../../electron.rst:145
msgid ""
"To make native Wayland the `default` for users, ``--socket=fallback-x11``"
" and ``--socket=wayland`` must be used in the manifest."
msgstr ""

#: ../../electron.rst:148
msgid ""
"For Electron versions between 17 and 27, client-side window decorations "
"under native Wayland can be enabled by passing ``--enable-"
"features=WaylandWindowDecorations`` to the program. For newer versions of"
" Electron , this isn't necessary anymore."
msgstr ""

#: ../../electron.rst:153
msgid ""
"Electron uses ``libnotify`` on Linux to provide desktop notifications. "
"`Since version 0.8.0 "
"<https://gitlab.gnome.org/GNOME/libnotify/-/merge_requests/27>`_ "
"libnotify automatically uses the `notification portal "
"<https://flatpak.github.io/xdg-desktop-portal/docs/doc-"
"org.freedesktop.portal.Notification.html>`_ when inside a sandboxed "
"environment and ``--talk-name=org.freedesktop.Notifications`` is not "
"required anymore. ``org.electronjs.Electron2.BaseApp`` includes "
"``libnotify>=0.8.0`` since ``branch/23.08``."
msgstr ""

#: ../../electron.rst:160
msgid ""
"To ensure proper mouse cursor scaling on HiDPI displays under Wayland, "
"the ``XCURSOR_PATH`` environment variable must be set to the host's "
"corresponding directories:"
msgstr ""

#: ../../electron.rst:172
msgid "Using correct desktop file name"
msgstr ""

#: ../../electron.rst:174
#, python-brace-format
msgid ""
"It's important for Linux applications to set the correct desktop file "
"name. If not, it can lead to problems like missing the window icon under "
"Wayland. By default Electron uses ``{appname}.desktop`` as desktop file "
"name. In Flatpak the name of the desktop file must be the id of the "
"Flatpak. To tell Electron to use another name you need to set the "
"``desktopName`` key in your ``package.json`` e.g. ``\"desktopName\": "
"\"com.example.MyApp.desktop\"``."
msgstr ""

#: ../../electron.rst:178
#, python-brace-format
msgid ""
"In case you repack a binary, you can use the ``patch-desktop-filename`` "
"script provided by the BaseApp. Each Electron binary ships with "
"``resources/app.asar`` file. You need to call ``patch-desktop-filename`` "
"with this file as argument. If your application is installed under "
"``${FLATPAK_DEST}/my-app`` you need to run ``patch-desktop-filename "
"${FLATPAK_DEST}/my-app/resources/app.asar``."
msgstr ""

#: ../../electron.rst:183
msgid "Build options"
msgstr "Opções de compilação"

#: ../../electron.rst:185
msgid ""
"These build options aren't strictly necessary, but can be useful if "
"something goes wrong. ``env`` allows setting an array of environment "
"variables, in this case we set ``NPM_CONFIG_LOGLEVEL`` to ``info`` so "
"that ``npm`` gives us more detailed error messages."
msgstr ""
"Essas opções de compilação não são estritamente necessárias, mas podem "
"ser úteis se algo der errado. ``env`` permite definir uma matriz de "
"variáveis de ambiente; nesse caso, definimos ``NPM_CONFIG_LOGLEVEL`` para"
" ``info``, para que ``npm`` nos forneça mensagens de erro mais "
"detalhadas."

#: ../../electron.rst:201
msgid "The application module"
msgstr "O módulo do aplicativo"

#: ../../electron.rst:203
msgid ""
"The final section of the manifest defines how the application module "
"should be built. This is where some of the additional logic for Electron "
"and Node.js can be found."
msgstr ""
"A seção final do manifesto define como o módulo do aplicativo deve ser "
"compilado. É aqui que algumas das lógicas adicionais para Electron e "
"Node.js podem ser encontradas."

#: ../../electron.rst:207
msgid ""
"By default, ``flatpak-builder`` doesn't allow build tools to access the "
"network. This means that tools which rely on downloading sources will not"
" work. Therefore, Node.js packages must be downloaded prior to running "
"the build. Setting the  ``electron_config_cache`` environment variable "
"means that these will be found when it comes to the build."
msgstr ""
"Por padrão, o ``flatpak-builder`` não permite que ferramentas de "
"compilação acessem a rede. Isso significa que as ferramentas que dependem"
" do download de fontes não funcionarão. Portanto, os pacotes Node.js "
"devem ser baixados antes da execução da compilação. Definir a variável de"
" ambiente ``electron_config_cache`` significa que elas serão encontradas "
"quando se trata da compilação."

#: ../../electron.rst:213
msgid ""
"The next part of the manifest describes how the application should be "
"built. The simple buildsystem option is used, which allows a sequence of "
"commands to be specified, which are used for the build. The download "
"location and hash of the application are also specified."
msgstr ""
"A próxima parte do manifesto descreve como o aplicativo deve ser criado. "
"A opção ``buildsystem`` definida com ``simple`` é usada, o que permite "
"que uma sequência de comandos seja especificada, que são usados para a "
"compilação. O local do download e o hash do aplicativo também são "
"especificados."

#: ../../electron.rst:236
msgid "Bundling NPM packages"
msgstr "Empacotando pacotes NPM"

#: ../../electron.rst:238
msgid "The next line is how NPM modules get bundled as part of Flatpaks:"
msgstr ""
"A próxima linha é como os módulos NPM são empacotados como parte de "
"Flatpaks:"

#: ../../electron.rst:244
msgid ""
"Since even simple Node.js applications depend on dozens of packages, it "
"would be impractical to specify all of them as part of a manifest file. A"
" `Python script <https://github.com/flatpak/flatpak-builder-"
"tools/tree/master/node>`__ has therefore been developed to download "
"Node.js packages with NPM or Yarn and include them in an application's "
"sources."
msgstr ""
"Como até mesmo aplicativos simples do Node.js dependem de dezenas de "
"pacotes, seria impraticável especificar todos eles como parte de um "
"arquivo de manifesto. Um `script em Python <https://github.com/flatpak"
"/flatpak-builder-tools/tree/master/node>`__ foi, portanto, desenvolvido "
"para baixar pacotes Node.js com o NPM ou Yarn e inclui-los nas fontes do "
"aplicativo."

#: ../../electron.rst:250
msgid ""
"The Python script requires a ``package-lock.json`` (or ``yarn.lock``) "
"file. This file contains information about the packages that an "
"application depends on, and can be generated by running ``npm install "
"--package-lock-only`` from an application's root directory. The script is"
" then run as follows::"
msgstr ""
"O script Python requer um arquivo ``package-lock.json`` (ou "
"``yarn.lock``). Este arquivo contém informações sobre os pacotes dos "
"quais um aplicativo depende e pode ser gerado executando ``npm install "
"--package-lock-only`` no diretório raiz de um aplicativo. O script é "
"então executado da seguinte maneira::"

#: ../../electron.rst:257
msgid ""
"This generates the manifest JSON needed to build the NPM/Yarn packages "
"for the application, which are outputted to a file called ``generated-"
"sources.json``. The content of this file can be copied to the "
"application's manifest but, because it is often very long, it is often "
"best to link to it from the main manifest, which is done by adding "
"``generated-source.json`` as a line in the manifest section, as seen "
"above."
msgstr ""
"Isso gera o manifesto JSON necessário para compilar os pacotes NPM/Yarn "
"para o aplicativo, que são gerados em um arquivo chamado ``generated-"
"sources.json``. O conteúdo desse arquivo pode ser copiado para o "
"manifesto do aplicativo, mas, como geralmente é muito longo, é melhor "
"vinculá-lo a partir do manifesto principal, o que é feito adicionando "
"``generated-source.json`` como um linha na seção do manifesto, como visto"
" acima."

#: ../../electron.rst:265
msgid "Launching the app"
msgstr "Iniciando o aplicativo"

#: ../../electron.rst:267
#, fuzzy
msgid ""
"The Electron app is run through a simple shell script that wraps `zypak "
"<https://github.com/refi64/zypak>`_. This script can be given any name "
"but must be specified in the manifest's ``command`` property. See below "
"for a sample wrapper to launch the app:"
msgstr ""
"O aplicativo Electron é executado através de um script simples. Isso pode"
" receber qualquer nome, mas deve ser especificado na propriedade "
"``\"command\":`` do manifesto. Veja abaixo um exemplo de wrapper para "
"iniciar um aplicativo:"

#: ../../electron.rst:280
msgid "Build commands"
msgstr "Comandos de compilação"

#: ../../electron.rst:282
#, fuzzy
msgid ""
"Last but not least, since the ``simple`` buildsystem is being used, a "
"list of build commands must be provided. As can be seen, ``npm`` is run "
"with the ``npm_config_offline=true`` environment variable, installing "
"dependencies from packages that have already been cached. These are "
"copied to ``/app/main/``. Finally the ``run.sh`` script is installed to "
"``/app/bin/`` so that it will be on ``$PATH``:"
msgstr ""
"Por último, mas não menos importante, como a opção de compilação simples "
"está sendo usada, uma lista de comandos de compilação deve ser fornecida."
" Como pode ser visto, ``npm`` é executado com a variável de ambiente "
"``npm_config_offline=true``, instalando dependências de pacotes que já "
"foram armazenados em cache. Estes são copiados para ``/app/main/``. "
"Finalmente, o script ``run.sh`` é instalado em ``/app/bin/`` para que ele"
" esteja em ``$PATH``:"

#: ../../electron.rst:304
msgid ""
"Note that if the application you are trying to package contains a "
"``build`` block in ``package.json`` with instructions for Linux, this can"
" cause ``electron-builder`` to try to fetch additional binaries at build-"
"time (Even if `--dir` option is used). The following example shows a "
"configuration that will try to download AppImage binaries:"
msgstr ""
"Note que se o aplicativo que você está tentando empacotar contiver um "
"bloco ``build`` no ``package.json`` com instruções para Linux, isso pode "
"fazer com que o ``electron-builder`` tente buscar binários adicionais em "
"tempo de compilação (Mesmo se a opção `--dir` for usada). O exemplo a "
"seguir mostra uma configuração que tentará baixar os binários do "
"AppImage:"

#: ../../electron.rst:314
msgid ""
"The preferred way of fixing this, is not a patch, but a build-time edit "
"using ``jq``. The following command will replace ``\"target\": "
"\"AppImage\"`` with ``\"target\": \"dir\"``:"
msgstr ""
"A maneira preferida de corrigir isso não é um patch, mas uma edição em "
"tempo de construção usando ``jq``. O comando a seguir substituirá "
"``\"target\": \"AppImage\"`` por ``\"target\": \"dir\"``:"

#: ../../electron.rst:321
msgid "Make setProgressBar and setBadgeCount work"
msgstr ""

#: ../../electron.rst:322
msgid ""
"The `setProgressBar <https://www.electronjs.org/docs/latest/api/browser-"
"window#winsetprogressbarprogress-options>`_ and `setBadgeCount "
"<https://www.electronjs.org/docs/latest/api/app#appsetbadgecountcount-"
"linux-macos>`_ functions allow showing a progress bar and a badge count "
"in the window icon. It is implemented under Linux using the "
"`UnityLauncherAPI <https://wiki.ubuntu.com/Unity/LauncherAPI>`_. This API"
" is not implemented on every desktop environment. A known desktop "
"environment which implements this is KDE. It is also implemented by the "
"popular `Dash to Dock <https://micheleg.github.io/dash-to-dock>`_ GNOME "
"extension and `Plank <https://launchpad.net/plank>`_."
msgstr ""

#: ../../electron.rst:325
msgid ""
"To make it work in Flatpak, the app needs to :ref:`use the correct "
"desktop filename <use-correct-desktop-filename>` in its embedded "
"`package.json` file. The Flatpak also needs the ``--talk-"
"name=com.canonical.Unity`` permission. Electron versions earlier than v32"
" checks `checks if it's running on Unity or KDE "
"<https://github.com/electron/electron/blob/fb88375ab4d2161dbf7e958a2a94c7c6d97dc84c/shell/browser/linux/unity_service.cc#L64>`_"
" before using the UnityLauncherAPI."
msgstr ""

#~ msgid ""
#~ "Note that this base app is for "
#~ "projects using Electron 1.x.x, the most"
#~ " common version at the time of "
#~ "writing. Electron 2.x.x applications should"
#~ " use ``org.electronjs.Electron2.BaseApp`` instead."
#~ msgstr ""
#~ "Observe que este aplicativo base é "
#~ "para projetos que usam o Electron "
#~ "1.x.x, a versão mais comum no "
#~ "momento em que este foi escrito. "
#~ "Os aplicativos Electron 2.x.x devem usar"
#~ " ``org.electronjs.Electron2.BaseApp``."

#~ msgid "Building Node.js"
#~ msgstr "Compilando Node.js"

#~ msgid ""
#~ "The next part of the manifest is"
#~ " the modules list. The Electron base"
#~ " app does not include Node.js, so "
#~ "it is necessary to build Node.js "
#~ "as a module. This tutorial builds "
#~ "Node.js 8.11.1, as this version works"
#~ " with most projects at the time "
#~ "of writing, but make sure to use"
#~ " whichever version is best for your"
#~ " project."
#~ msgstr ""
#~ "A próxima parte do manifesto é a"
#~ " lista de módulos. O aplicativo base"
#~ " Electron não inclui o Node.js, "
#~ "portanto, é necessário criar o Node.js"
#~ " como um módulo. Este tutorial cria"
#~ " o Node.js 8.11.1, pois esta versão"
#~ " funciona com a maioria dos projetos"
#~ " no momento da escrita, mas "
#~ "certifique-se de usar a versão que"
#~ " for melhor para o seu projeto."

#~ msgid ""
#~ "Here, the cleanup step isn't strictly"
#~ " necessary. However, removing documentation "
#~ "helps to reduce final disk size of"
#~ " the bundle."
#~ msgstr ""
#~ "Aqui, a etapa de limpeza não é "
#~ "estritamente necessária. No entanto, a "
#~ "remoção da documentação ajuda a reduzir"
#~ " o tamanho final do disco do "
#~ "pacote."

#~ msgid "Then you can run the build::"
#~ msgstr "Então, você pode executar a compilação::"

#~ msgid ""
#~ "Client-side window decorations in native"
#~ " wayland can be enabled by passing"
#~ " ``--enable-features=WaylandWindowDecorations`` "
#~ "(Electron>=17)."
#~ msgstr ""

#~ msgid ""
#~ "To make it work in Flatpak, the"
#~ " app needs to :ref:`use the correct"
#~ " desktop filename <use-correct-desktop-"
#~ "filename>`. The Flatpak also needs the"
#~ " ``--talk-name=com.canonical.Unity`` permission. "
#~ "Electron versions earlier than v32 "
#~ "checks `checks if it's running on "
#~ "Unity or KDE "
#~ "<https://github.com/electron/electron/blob/fb88375ab4d2161dbf7e958a2a94c7c6d97dc84c/shell/browser/linux/unity_service.cc#L64>`_"
#~ " before using the UnityLauncherAPI."
#~ msgstr ""

#~ msgid ""
#~ "The sample app also configures "
#~ "pulseaudio for sound and enables network"
#~ " access."
#~ msgstr ""

#~ msgid ""
#~ "Native wayland support in electron is"
#~ " experimental and often unstable. It "
#~ "is advised to stick with the X11"
#~ " and Xwayland configuration above as "
#~ "the default."
#~ msgstr ""

#~ msgid ""
#~ "To enable experimental `native Wayland` "
#~ "support in Electron>=20, the ``--ozone-"
#~ "platform-hint=auto`` flag can be passed "
#~ "to the program. `auto` will choose "
#~ "Wayland when the session is wayland "
#~ "and Xwayland or X11 otherwise."
#~ msgstr ""

#~ msgid ""
#~ "The recommended option is to leave "
#~ "it to the user. So ``--socket=x11`` "
#~ "should be used in manifest and "
#~ "Wayland can be tested with::"
#~ msgstr ""

#~ msgid ""
#~ "To make native wayland the `default` "
#~ "for users ``--socket=fallback-x11`` and "
#~ "``--socket=wayland`` must be used in the"
#~ " manifest."
#~ msgstr ""

#~ msgid ""
#~ "For Electron versions between 17 and "
#~ "27, client-side window decorations in"
#~ " native wayland can be enabled by "
#~ "passing ``--enable-features=WaylandWindowDecorations``."
#~ msgstr ""

#~ msgid ""
#~ "Electron uses ``libnotify`` on Linux to"
#~ " provide desktop notifications. libnotify "
#~ "`since 0.8.0 "
#~ "<https://gitlab.gnome.org/GNOME/libnotify/-/merge_requests/27>`_ "
#~ "automatically uses the `notification portal"
#~ " <https://flatpak.github.io/xdg-desktop-portal/docs"
#~ "/doc-org.freedesktop.portal.Notification.html>`_ when "
#~ "inside a sandboxed environment and "
#~ "``--talk-name=org.freedesktop.Notifications`` is not"
#~ " required."
#~ msgstr ""

#~ msgid ""
#~ "``org.electronjs.Electron2.BaseApp`` since "
#~ "``branch/23.08`` comes with ``libnotify>=0.8.0``"
#~ msgstr ""

