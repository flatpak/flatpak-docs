# PikachuHy <pikachuhy@163.com>, 2018. #zanata
# WTZ <zwpwjwtz@126.com>, 2018. #zanata
# ZiqiangXu <ziqiang_xu@yeah.net>, 2018. #zanata
msgid ""
msgstr ""
"Project-Id-Version:  Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-20 23:19+0530\n"
"PO-Revision-Date: 2018-11-03 02:18-0400\n"
"Last-Translator: PikachuHy <pikachuhy@163.com>\n"
"Language: zh_Hans_CN\n"
"Language-Team: Chinese (Simplified, China)\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../desktop-integration.rst:2
msgid "Desktop Integration"
msgstr "桌面集成"

#: ../../desktop-integration.rst:4
msgid ""
":doc:`conventions` covers the essential aspects of Linux desktop "
"integration. This page provides further information on optional desktop "
"integration features. It also provides guidance on how applications can "
"ensure that their user interfaces fit into the whole range of Linux "
"desktops and distributions."
msgstr ""
":doc:`conventions` "
"涵盖了Linux桌面集成的必要方面。这个页面提供了更多可选的桌面集成特性的信息。它也提供了一个指南，便于开发者让程序的用户界面兼容多数Linux桌面和发行版。"

#: ../../desktop-integration.rst:10
#, fuzzy
msgid ""
"This information is primarily intended for developers who are new to "
"Linux. However, it is also relevant to desktop-specific Linux "
"applications seeking to target a broader range of Linux environments."
msgstr "这些信息主要是为刚接触Linux的开发者准备的。不过它也适用于那些希望把特定应用推广到更多Linux发行版的开发者。"

#: ../../desktop-integration.rst:14
msgid ""
"While targeting the Linux desktop ecosystem might seem challenging, the "
"existence of common standards, in combination with these guidelines, "
"means that supporting the full range of Linux environments needn't be "
"difficult."
msgstr "开发适用于Linux生态的应用可能是一项挑战性的任务，但现有的标准和指南会帮助开发者更方便地适配大多数Linux环境。"

#: ../../desktop-integration.rst:19
msgid "Locale detection"
msgstr "检测区域设置"

#: ../../desktop-integration.rst:21
msgid ""
"Application toolkits, such as Electron, GTK and Qt, provide built-in "
"support for detecting which locale to use. Otherwise, the ``setlocale`` "
"function can be used."
msgstr "应用程序的工具集（如Electron、GTK和Qt）默认提供了检测区域的功能。除此此外，你也可以使用 ``setlocale`` 。"

#: ../../desktop-integration.rst:26
msgid "Portals"
msgstr "门户"

#: ../../desktop-integration.rst:28
msgid ""
"Portals are the framework for securely accessing resources from outside "
"an application sandbox. They provide a range of common features to "
"applications, including:"
msgstr "门户是用于安全访问沙箱外资源的框架。沙箱内程序可以使用的特性包括："

#: ../../desktop-integration.rst:32
msgid "Determining network status"
msgstr "检测网络状态"

#: ../../desktop-integration.rst:33
msgid "Opening a file with a file chooser"
msgstr "使用文件选择器来打开文件"

#: ../../desktop-integration.rst:34
msgid "Opening URIs"
msgstr "打开URI"

#: ../../desktop-integration.rst:35
#, fuzzy
msgid "Preventing the device from suspending, sleeping, or powering off"
msgstr "阻止设备关机、休眠或进入待机状态"

#: ../../desktop-integration.rst:36
msgid "Printing"
msgstr "打印"

#: ../../desktop-integration.rst:37
msgid "Sending email"
msgstr "发送邮件"

#: ../../desktop-integration.rst:38
msgid "Showing notifications"
msgstr "显示通知"

#: ../../desktop-integration.rst:39
msgid "Taking screenshots and screencasts"
msgstr "截取屏幕或录屏"

#: ../../desktop-integration.rst:41
msgid "Toolkits like GTK and Qt provide transparent support for portals."
msgstr ""

#: ../../desktop-integration.rst:48
msgid ""
"If you are not using one of these toolkits, it is possible to access the "
"portal API directly. See `XDG Desktop Portal <https://flatpak.github.io"
"/xdg-desktop-portal/>`_ for more information."
msgstr ""

#: ../../desktop-integration.rst:54
msgid "Notifications"
msgstr "通知"

#: ../../desktop-integration.rst:56
msgid ""
"A number of toolkits and frameworks provide transparent support for Linux"
" desktop notifications. These include Electron, GTK, KDE and QML."
msgstr ""

#: ../../desktop-integration.rst:60
msgid "Status icons"
msgstr "状态图标"

#: ../../desktop-integration.rst:62
#, fuzzy
msgid ""
"Status icons are similar to the system tray or taskbar on Windows, or "
"menu bar icons on macOS. These are supported on most Linux distributions "
"through abstractions such as libappindicator."
msgstr "状态图标对应于Windows系统中的系统托盘/任务栏图标，或者Mac系统中的菜单栏图标。大多数Linux发行版通过libappindicator提供对状态图标的支持。"

#: ../../desktop-integration.rst:66
#, fuzzy
msgid ""
"A number of Linux distributions don't show status icons. It is still "
"possible to provide a status icon, and it will be shown in some "
"distributions. However, to ensure compatibility, it is recommended to use"
" status icons only in a supplementary manner, rather than relying on them"
" as the only mechanism for providing status information or access to "
"particular features. These include \"minimize to tray\" (or equivalent) "
"functionality."
msgstr "部分Linux发行版不显示状态图标；不过您仍然可以设置一个图标，以便它可以在其他发行版中显示出来。出于对兼容性的考虑，建议您只把状态图标作为应用交互逻辑的补充，而不是用于实现特定功能或显示特定信息的唯一入口（包括“最小化到托盘”这一功能）。"

#: ../../desktop-integration.rst:73
msgid ""
"XEmbed style icons will function on desktops that support them with the "
"``x11`` permission."
msgstr ""

#: ../../desktop-integration.rst:77
msgid "StatusNotifier"
msgstr ""

#: ../../desktop-integration.rst:79
msgid ""
"StatusNotifier style icons will not function without extra permissions, "
"as they require talking to a non-hardened host service. Risks include "
"impersonation of other softwares and exploitation of bugs in host "
"services such as image decoders."
msgstr ""

#: ../../desktop-integration.rst:83
msgid ""
"To use StatusNotifier, you must at least have the ``--talk-"
"name=org.kde.StatusNotifierWatcher`` permission to register an item."
msgstr ""

#: ../../desktop-integration.rst:86
msgid ""
"Depending on the exact implementation of StatusNotifier that your "
"application is using, it may need session bus ownership of "
"``org.kde.StatusNotifierItem-$PID-$ITEM_ID``."
msgstr ""

#: ../../desktop-integration.rst:89
msgid ""
"This permission is problematic in Flatpak as the ``$PID`` value is often "
"the same in sandboxes, leading to potential conflicts with other "
"applications. However, if needed, the ``--own-name=org.kde.*`` permission"
" will allow this."
msgstr ""

#: ../../desktop-integration.rst:94
msgid ""
"This introduces many new risks, including the ability to impersonate any "
"KDE service or application, possibly capturing important user data."
msgstr ""

#: ../../desktop-integration.rst:97
msgid ""
"Most implementations of StatusNotifier have dropped this requirement, but"
" known exceptions include Electron versions older than 23.3.0."
msgstr ""

#: ../../desktop-integration.rst:100
msgid ""
"Current versions of Electron, Chromium, KNotifications, and "
"libappindicator are known to work without ownership permissions."
msgstr ""

#: ../../desktop-integration.rst:104
msgid "System search"
msgstr "系统内搜索"

#: ../../desktop-integration.rst:106
#, fuzzy
msgid ""
"GNOME-based distributions, like CentOS, Fedora, Red Hat Enterprise Linux "
"and Ubuntu, offer the option to integrate with system search by providing"
" a `search provider <https://developer.gnome.org/documentation/tutorials"
"/search-provider.html>`_. This allows application-provided search results"
" to appear in the Activities Overview."
msgstr ""
"使用GNOME桌面的发行版，如CentOS、Fedora、Red Hat Enterprise "
"Linux和Ubuntu整合了系统范围内搜索的功能： `search provider "
"<https://developer.gnome.org/SearchProvider/>`_  。这使得应用程序可以将特定内容添加到沙箱外 "
"Activities Overview（活动列表，译者注）并显示给用户。"

#: ../../desktop-integration.rst:112
msgid "Window controls"
msgstr "窗口控制"

#: ../../desktop-integration.rst:114
#, fuzzy
msgid ""
"Window controls are the buttons used to close, maximize and minimize "
"windows. These vary across Linux desktops, particularly in terms of which"
" controls are shown. Whether applications follow these variations is at "
"their discretion. Providing the exact same controls as used by a "
"particular desktop environment should not be seen as a hard requirement."
msgstr "窗口控件是关闭、最大化、最小化窗口的按钮。这些在不同的Linux桌面是不同的，特别是在要显示哪些控件方面。应用程序是否试图遵循这些变化取决于它们的判断力。提供与特定桌面环境所使用的完全相同的控件不应该被视为硬性要求。"

#: ../../desktop-integration.rst:120
#, fuzzy
msgid ""
"From a user experience perspective, it is important to ensure that window"
" controls appear on the same side of the window as in other desktop "
"applications. On Linux, this is the right side of the window (like "
"Windows)."
msgstr "从用户体验的角度来看，确保窗口控件出现在窗口的同一侧与其他桌面是很重要的。在Linux上，这是窗口的右侧(就像Windows一样)。"

#: ../../desktop-integration.rst:124
msgid ""
"On X11, applications can rely on system-provided title bars if they don't"
" want to draw their own window controls. For a consistent Wayland "
"experience, applications must always provide their own. Typically, "
"toolkits handle this, but raw Wayland clients can use `libdecor "
"<https://gitlab.freedesktop.org/libdecor/libdecor>`_ for a general "
"solution."
msgstr ""

#: ../../desktop-integration.rst:131
msgid "Window decorations"
msgstr "窗口美化"

#: ../../desktop-integration.rst:133
#, fuzzy
msgid ""
"If your application uses a dark visual style as well as system-provided "
"window decorations, the ``GTK_THEME_VARIANT=dark`` X11 window property "
"should be used to ensure that window decorations match the rest of the "
"application window. This can be done by running::"
msgstr ""
"如果您的应用程序使用深色视觉样式以及系统提供的窗口装饰，那么应该使用 ``GTK_THEME_VARIANT=dark`` "
"这个X11窗口属性，以确保窗口装饰与应用程序窗口的其余部分匹配。通过运行::"

#: ../../desktop-integration.rst:141
msgid "Global menus"
msgstr ""

#: ../../desktop-integration.rst:143
msgid ""
"If your application uses `Gtk.Application:menubar "
"<https://docs.gtk.org/gtk4/class.Application.html#properties>`_ or "
"`QMenuBar <https://doc.qt.io/qt-6/qmenubar.html>`_ it will work as "
"expected within a sandboxed application."
msgstr ""

#: ../../desktop-integration.rst:147
msgid "Theming"
msgstr ""

#: ../../desktop-integration.rst:149
msgid ""
"Flatpak applications cannot directly use the system theme from the host "
"as the ``/usr`` directory inside the sandbox is reserved by the runtime, "
"and host's ``/usr`` where system themes are typically stored cannot be "
"made available over that. Additionally, themes often depend on specific "
"toolkit versions, which may differ between the host and the runtime. "
"Relying on the host to have the correct version for every flatpak also "
"defeats the portability benefits Flatpak provides."
msgstr ""

#: ../../desktop-integration.rst:157
msgid ""
"The solution to this is to package the themes as flatpaks. These themes "
"are provided as :doc:`extension` to the Freedesktop runtime for Gtk3 "
"themes and to the KDE runtime for Qt themes."
msgstr ""

#: ../../desktop-integration.rst:161
msgid ""
"The theming system requires Flatpak 0.8.4+ and applications using up-to-"
"date ``org.gnome.Platform`` 3.24+, ``org.freedesktop.Platform`` 1.6+, or "
"``org.kde.Platform`` 5.9+."
msgstr ""

#: ../../desktop-integration.rst:166
msgid "Installing themes"
msgstr ""

#: ../../desktop-integration.rst:169
msgid "Instructions for Gtk themes"
msgstr ""

#: ../../desktop-integration.rst:171
msgid ""
"As of Flatpak 0.10.1, Flatpak can automatically detect the active Gtk "
"theme on the host by reading the value of the ``gtk-theme`` DConf key."
msgstr ""

#: ../../desktop-integration.rst:174
msgid ""
"If the corresponding theme is packaged as an extension in the remote, "
"Flatpak will automatically install it during ``flatpak install`` or "
"``flatpak update``."
msgstr ""

#: ../../desktop-integration.rst:179
msgid "Instructions for Qt themes"
msgstr ""

#: ../../desktop-integration.rst:181
msgid ""
"There are a few Qt theme extensions packaged on Flathub. To see a list, "
"you can run::"
msgstr ""

#: ../../desktop-integration.rst:186
msgid "Then you can install the theme with::"
msgstr ""

#: ../../desktop-integration.rst:190
msgid ""
"replacing ``Foo`` with the name of the desired theme. The theme needs to "
"be available for the KDE runtime branch used by the application."
msgstr ""

#: ../../desktop-integration.rst:194
msgid "Gtk look and feel in Qt applications"
msgstr ""

#: ../../desktop-integration.rst:196
msgid ""
"On Wayland, starting from the 5.15-22.08+ and 6.5+ branches of the "
"``org.kde.Platform`` runtime, "
"``org.kde.WaylandDecoration.QAdwaitaDecorations`` and "
"``org.kde.WaylandDecoration.QGnomePlatform-decoration`` need to be "
"installed. Please see the upstream `usage "
"<https://github.com/FedoraQt/QAdwaitaDecorations?tab=readme-ov-"
"file#usage>`_ instructions as well."
msgstr ""

#: ../../desktop-integration.rst:202
msgid "These plugins will be part of upstream starting at Qt 6.8."
msgstr ""

#: ../../desktop-integration.rst:204
msgid ""
"For older runtimes, ``org.kde.PlatformTheme.QGnomePlatform`` and "
"``org.kde.WaylandDecoration.QGnomePlatform-decoration`` need to be "
"installed."
msgstr ""

#: ../../desktop-integration.rst:209
msgid "Applying themes"
msgstr ""

#: ../../desktop-integration.rst:211
msgid ""
"The prerequisite for applying themes in Flatpak is to have the theme "
"available to the application in the sandbox, commonly done by packaging "
"them as theme extensions."
msgstr ""

#: ../../desktop-integration.rst:215
msgid ""
"Now the system theme needs to be communicated from the host to the "
"sandbox."
msgstr ""

#: ../../desktop-integration.rst:217
msgid ""
"On X11, Gtk3 picks up themes from XSettings. Specifically, on GNOME, the "
"GNOME XSettings daemon ``gsd-xsettings`` reads the DConf values and "
"converts them into XSettings values. On GNOME, this should work by "
"default, provided ``gsd-xsettings`` is running."
msgstr ""

#: ../../desktop-integration.rst:222
msgid ""
"On Wayland, the active theme is exposed via the corresponding Settings "
"portal. This requires the portal backend for the desktop environment to "
"be installed."
msgstr ""

#: ../../desktop-integration.rst:226
msgid ""
"Once the theme is installed and exposed in the sandbox, it will be "
"automatically applied, depending on the toolkit or libraries used by the "
"application."
msgstr ""

#: ../../desktop-integration.rst:230
msgid ""
"If the theme is not available via Flatpak extensions, or either the "
"Settings portal or XSettings support is lacking, Gtk and Qt applications "
"will fall back to using Adwaita or the default Qt theme."
msgstr ""

#: ../../desktop-integration.rst:234
msgid ""
"In that case, either the theme needs to be packaged as an extension, or "
"the application needs to have permission to read the theme and Gtk or Qt "
"settings from the host, usually by giving it filesystem access. This is "
"undesirable in most cases, as it weakens the sandbox and reduces "
"portability. Instead, desktop environments should provide proper support "
"for the Settings portal or XSettings daemon."
msgstr ""

#: ../../desktop-integration.rst:241
msgid ""
"If a Gtk theme is not packaged as an extension, an unmaintained extension"
" can be created for it. Please see :ref:`extension:Creating an "
"unmaintained Gtk theme extension`."
msgstr ""

#: ../../desktop-integration.rst:246
msgid "Appearance Settings"
msgstr ""

#: ../../desktop-integration.rst:248
msgid ""
"Appearance settings, such as the Freedesktop color-scheme preference, are"
" also exposed similarly via the respective Settings portal. The "
"application needs to support reading it, and the proper portal backends "
"need to be installed for this to work."
msgstr ""

#: ../../desktop-integration.rst:254
msgid "Icons"
msgstr ""

#: ../../desktop-integration.rst:256
msgid ""
"Since Flatpak 0.8.8, host icons from ``/usr/share/icons`` are exposed in "
"the sandbox at ``/run/host/share/icons`` and ``$XDG_DATA_HOME/icons`` in "
"``/run/host/user-share/icons``."
msgstr ""

#: ../../desktop-integration.rst:260
msgid "``~/.icons`` is a legacy path and should not be used."
msgstr ""

#: ../../desktop-integration.rst:263
msgid "Fonts"
msgstr ""

#: ../../desktop-integration.rst:265
msgid ""
"Flatpak exposes fonts from the host to the sandbox, and the runtime ships"
" the default fontconfig from upstream."
msgstr ""

#: ../../desktop-integration.rst:268
msgid ""
"Fonts from ``/usr/share/fonts`` are exposed at ``/run/host/fonts``, from "
"``/usr/local/share/fonts`` at ``/run/host/local-fonts``, and from "
"``$XDG_DATA_HOME/fonts`` at ``/run/host/user-fonts``."
msgstr ""

#: ../../desktop-integration.rst:272
msgid "``~/.fonts`` is a legacy path and should not be used."
msgstr ""

#: ../../desktop-integration.rst:274
msgid "Fontconfig config files from the host are not exposed."
msgstr ""

#~ msgid ""
#~ "Toolkits like GTK and Qt provide "
#~ "transparent support for portals. If you"
#~ " are not using one of these "
#~ "toolkits, it is possible to access "
#~ "the portals API directly. See the "
#~ "`portals API documentation "
#~ "<https://flatpak.github.io/xdg-desktop-portal/portal-"
#~ "docs.html>`_ for more information."
#~ msgstr ""
#~ "GTK和Qt等工具集默认提供了对门户的支持。如果您使用的不是这类工具集，也可以直接使用门户的API来实现上述功能。请参考 "
#~ "`portals API documentation "
#~ "<https://flatpak.github.io/xdg-desktop-portal/portal-"
#~ "docs.html>`_ 以获取更多信息。"

#~ msgid ""
#~ "A number of toolkits and frameworks "
#~ "provide transparent support for Linux "
#~ "desktop notificatoions. This includes "
#~ "Electron, GTK, KDE and QML. Applications"
#~ " not using one of these can "
#~ "either use the `libnotify "
#~ "<https://developer.gnome.org/libnotify/>`_ library or "
#~ "portals. Of these, portals has the "
#~ "benefit that it can easily be used"
#~ " from within an application sandbox."
#~ msgstr ""
#~ "多数工具集和框架提供了对Linux桌面通知的透明支持，如GTK、KDE和QML。此外，应用程序也可以通过 `libnotify"
#~ " <https://developer.gnome.org/libnotify/>`_  "
#~ "函数库或者门户来使用桌面通知功能。显然，对于沙箱内的应用而言，使用门户来操作桌面通知是相对便捷的选择。"

#~ msgid "Defunct integration options"
#~ msgstr "已废弃的选项"

#~ msgid ""
#~ "The following desktop integration options "
#~ "are no longer in use and can "
#~ "be safely ignored:"
#~ msgstr "以下桌面集成选项不再使用，可以安全地忽略："

#~ msgid ""
#~ "Application menus - these are specific"
#~ " to the GNOME desktop. However, they"
#~ " are likely to be phased out in"
#~ " the future."
#~ msgstr "应用程序菜单——这些是特定于GNOME桌面的。然而，它们可能会在未来逐步淘汰。"

#~ msgid ""
#~ "Global menu bar - this was a "
#~ "feature similar to Mac's menu bar, "
#~ "which was part of Ubuntu's Unity "
#~ "desktop. This has been retired. All "
#~ "Linux desktops and distributions expect "
#~ "a menu bar to be shown as "
#~ "part of the application window, should"
#~ " one be provided (rather than relying"
#~ " on a global menu bar, as on"
#~ " Mac)."
#~ msgstr ""
#~ "全局菜单栏——这是一个类似于Mac菜单栏的功能，它是Ubuntu "
#~ "Unity桌面的一部分。这个已经退休了。所有Linux桌面和发行版都希望在应用程序窗口中显示菜单栏(而不是像Mac那样依赖全局菜单栏)。"

#~ msgid "Toolkits like GTK and Qt provide transparent support for portals:"
#~ msgstr ""

#~ msgid ""
#~ "Applications can rely on system-provided"
#~ " titlebars on Linux, if they don't"
#~ " want to draw their own window "
#~ "controls."
#~ msgstr "如果应用程序不想绘制自己的窗口控件，则可以依赖Linux上系统提供的标题栏。"

#~ msgid ""
#~ "If your application uses the built "
#~ "in ``GtkApplication:menu-bar`` or the Qt"
#~ " 5 equivalent they will work as "
#~ "expected from within a sandboxed "
#~ "application."
#~ msgstr ""

#~ msgid ""
#~ "If you are not using one of "
#~ "these toolkits, it is possible to "
#~ "access the portals API directly. See "
#~ "the `Portals API documentation "
#~ "<https://flatpak.github.io/xdg-desktop-portal/portal-"
#~ "docs.html>`_ for more information."
#~ msgstr ""

#~ msgid ""
#~ "XEmbed style icons will function with"
#~ " the ``x11`` permission but all other"
#~ " status icon interfaces require extra "
#~ "permissions to escape the sandbox and"
#~ " these services are not designed to"
#~ " be robust against untrusted software."
#~ msgstr ""

#~ msgid ""
#~ "Flatpak applications cannot directly use "
#~ "the system theme. This happens because"
#~ " flatpaks do not have the ability "
#~ "to use data files or libraries in"
#~ " ``/usr`` (where system themes are "
#~ "typically located). The solution to this"
#~ " was to package themes as Flatpaks,"
#~ " as relying upon the host to "
#~ "have the correct version for every "
#~ "flatpak defeats the portability benefits "
#~ "it provides. These themes are provided"
#~ " as `extensions "
#~ "<https://github.com/flatpak/flatpak/wiki/Extensions>`_, to "
#~ "the Freedesktop runtime when the "
#~ "extension point is Gtk, and to the"
#~ " KDE runtime when the extension point"
#~ " is Qt."
#~ msgstr ""

#~ msgid "Instructions for Gtk"
#~ msgstr ""

#~ msgid ""
#~ "The current Gtk themes are packaged "
#~ "in the `flathub <https://flathub.org/>`_ "
#~ "repository which you can add (if "
#~ "it's not already added) by running::"
#~ msgstr ""

#~ msgid ""
#~ "To see a list of currently "
#~ "packaged themes you can use the "
#~ "command ``flatpak search gtk3theme`` "
#~ "(available since Flatpak version 0.10.1). "
#~ "In case you use an older version"
#~ " of Flatpak than that, you can "
#~ "use the command ``flatpak remote-ls "
#~ "flathub | grep org.gtk.Gtk3theme``. The "
#~ "difference in output between these two"
#~ " commands is that the first prints"
#~ " the application ID, the remote from"
#~ " which the theme comes and the "
#~ "theme's description, while the second "
#~ "prints only the full name of the"
#~ " theme's flatpak package."
#~ msgstr ""

#~ msgid ""
#~ "You can install themes with the "
#~ "command ``flatpak install flathub "
#~ "org.gtk.Gtk3theme.Foo``, replacing ``Foo`` with "
#~ "the name of the desired theme."
#~ msgstr ""

#~ msgid "Instructions for Qt"
#~ msgstr ""

#~ msgid ""
#~ "For the Qt theming to work, the"
#~ " flatpak packages kstyle and platformtheme"
#~ " must be installed. These are packed"
#~ " in the kdeapps repository which you"
#~ " can add by running::"
#~ msgstr ""

#~ msgid ""
#~ "Afterwards the two packages can be "
#~ "installed with the following commands::"
#~ msgstr ""

#~ msgid ""
#~ "There is no ideal way to specify"
#~ " the theme Flatpak applications use. "
#~ "The applications will try to match "
#~ "the system theme currently being used,"
#~ " if it corresponds to any of "
#~ "the Flatpak themes installed, and will"
#~ " fall back to Adwaita (if they "
#~ "use Gtk2 or Gtk3) or the default"
#~ " Qt theme (if they use Qt) if"
#~ " a corresponding theme isn't detected."
#~ msgstr ""

#~ msgid ""
#~ "As of Flatpak 0.10.1, the Flatpak "
#~ "system can detect whether the system "
#~ "themes available correspond to any "
#~ "Flatpak themes available in the "
#~ "repositories, and, if so, will "
#~ "automatically install found themes at "
#~ "update time based upon the ``gtk-"
#~ "theme`` Dconf key. This key however "
#~ "can contain only one value, the "
#~ "one of the currently being used "
#~ "theme, which means that the Flatpak "
#~ "versions of matching themes that aren't"
#~ " currently being used aren't installed "
#~ "until those themes are enabled. If "
#~ "none of the corresponding system themes"
#~ " are currently being used, the "
#~ "applications will fall back to Adwaita"
#~ " or the default Qt theme."
#~ msgstr ""

#~ msgid ""
#~ "On X11, Gtk3 picks up the themes"
#~ " via XSettings. Specifically, the GNOME "
#~ "XSettings daemon ``gsd-xsettings`` reads "
#~ "the DConf values and converts them "
#~ "into the XSettings values. For this "
#~ "to work, you need an xsettings "
#~ "daemon that is correctly configured. "
#~ "Gtk3 on Wayland picks up themes "
#~ "directly via Dconf. For this to "
#~ "work, you can either use KDE (with"
#~ " ``kde-gtk-config`` > 5.11.95), "
#~ "GNOME, which works out of the box,"
#~ " or manually configure the dconf keys"
#~ " under ``/org/gnome/desktop/interface/``. For the"
#~ " DConf option to work on Wayland "
#~ "the application must also be configured"
#~ " to have DConf access."
#~ msgstr ""

#~ msgid "Other notes on theming"
#~ msgstr ""

#~ msgid ""
#~ "In regards to icon themes, since "
#~ "Flatpak 0.8.8 the host icons are "
#~ "exposed to the guest, so that "
#~ "there is usually no need for the"
#~ " presence of Flatpak icon themes."
#~ msgstr ""

#~ msgid ""
#~ "If you use the *Global Dark Theme*"
#~ " option (removed in GNOME-Tweaks "
#~ "3.28)  in ``gnome-tweak-tool`` it "
#~ "will not work as that simply "
#~ "writes to ``settings.ini`` which isn’t "
#~ "available in the sandbox. Use dark "
#~ "versions of themes instead if they "
#~ "exist."
#~ msgstr ""

#~ msgid ""
#~ "If you are not using one of "
#~ "these toolkits, it is possible to "
#~ "access the portals API directly. See "
#~ "the `Portals API documentation "
#~ "<https://flatpak.github.io/xdg-desktop-portal/>`_ "
#~ "for more information."
#~ msgstr ""

#~ msgid ""
#~ "A number of toolkits and frameworks "
#~ "provide transparent support for Linux "
#~ "desktop notifications. This includes Electron,"
#~ " GTK, KDE and QML."
#~ msgstr ""

#~ msgid ""
#~ "StatusNotifier style icons will not "
#~ "function without extra permissions as it"
#~ " requires talking to a non-hardenend"
#~ " host service. Risks include impersonation"
#~ " of other software and exploitation "
#~ "of bugs in the host service such"
#~ " as image decoders."
#~ msgstr ""

#~ msgid ""
#~ "At the very minimum to use "
#~ "StatusNotifier you must have the "
#~ "``--talk-name=org.kde.StatusNotifierWatcher`` permission "
#~ "to register an item."
#~ msgstr ""

#~ msgid ""
#~ "Depending on the exact implementation of"
#~ " StatusNotifier that your application is"
#~ " using it may need session bus "
#~ "ownership of ``org.kde.StatusNotifierItem-$PID-$ITEM_ID``."
#~ msgstr ""

#~ msgid ""
#~ "This permission is problematic in "
#~ "Flatpak as the ``$PID`` value is "
#~ "often the same in sandboxes and "
#~ "the item will possibly conflict with "
#~ "other applications. However if needed "
#~ "the ``--own-name=org.kde.*`` permission will"
#~ " allow this. This opens many new "
#~ "risks including the ability to "
#~ "impersonate any KDE service or "
#~ "application possibly capturing important user"
#~ " data."
#~ msgstr ""

#~ msgid ""
#~ "Most implementations of StatusNotifer have "
#~ "dropped this requirement but known "
#~ "exceptions to this are Electron versions"
#~ " older than 23.3.0."
#~ msgstr ""

#~ msgid ""
#~ "On X11 applications can rely on "
#~ "system-provided titlebars if they don't "
#~ "want to draw their own window "
#~ "controls. For a consistent Wayland "
#~ "experience applications must always provide"
#~ " their own. Typically toolkits handle "
#~ "this but raw wayland clients can "
#~ "use `libdecor <https://gitlab.gnome.org/jadahl/libdecor>`_"
#~ " for a general solution."
#~ msgstr ""

#~ msgid ""
#~ "If your application uses "
#~ "`Gtk.Application:menubar "
#~ "<https://docs.gtk.org/gtk4/class.Application.html#properties>`_ "
#~ "or `QMenuBar <https://doc.qt.io/qt-6/qmenubar.html>`_ "
#~ "it will work as expected from "
#~ "within a sandboxed application."
#~ msgstr ""

#~ msgid ""
#~ "Flatpak applications cannot directly use "
#~ "the system theme. This happens because"
#~ " flatpaks do not have the ability "
#~ "to use data files or libraries in"
#~ " ``/usr`` (where system themes are "
#~ "typically located). The solution to this"
#~ " is to package themes as Flatpaks,"
#~ " as relying upon the host to "
#~ "have the correct version for every "
#~ "flatpak defeats the portability benefits "
#~ "it provides. These themes are provided"
#~ " as :doc:`extension`, to the Freedesktop"
#~ " runtime for Gtk3 themes, and to "
#~ "the KDE runtime for Qt themes."
#~ msgstr ""

#~ msgid ""
#~ "The theming system requires Flatpak "
#~ "0.8.4+ and applications using up to "
#~ "date ``org.gnome.Platform`` 3.24+, or "
#~ "``org.freedesktop.Platform`` 1.6+, or "
#~ "``org.kde.Platform`` 5.9+."
#~ msgstr ""

#~ msgid ""
#~ "As of Flatpak 0.10.1, Flatpak can "
#~ "automatically detect the active Gtk "
#~ "theme on host by reading the value"
#~ " of the ``gtk-theme`` DConf key."
#~ msgstr ""

#~ msgid ""
#~ "If the corressponding theme is packaged"
#~ " as an extension in the remote, "
#~ "Flatpak will automatically install it "
#~ "during ``flatpak install`` or ``flatpak "
#~ "update``."
#~ msgstr ""

#~ msgid ""
#~ "Since ``org.kde.Platform`` runtime branches "
#~ "5.15-22.08+ and 6.5+, on Wayland, "
#~ "``org.kde.WaylandDecoration.QAdwaitaDecorations`` and "
#~ "``org.kde.WaylandDecoration.QGnomePlatform-decoration`` "
#~ "needs to be installed. Please see "
#~ "the `usage "
#~ "<https://github.com/FedoraQt/QAdwaitaDecorations?tab=readme-"
#~ "ov-file#usage>`_ instructions upstream too."
#~ msgstr ""

#~ msgid ""
#~ "For older runtimes, "
#~ "``org.kde.PlatformTheme.QGnomePlatform`` and "
#~ "``org.kde.WaylandDecoration.QGnomePlatform-decoration`` "
#~ "needs to be installed."
#~ msgstr ""

#~ msgid ""
#~ "The pre-requisite to applying themes "
#~ "in Flatpaks is to have the theme"
#~ " available to the application in the"
#~ " sandbox, commonly done by packaging "
#~ "them as theme extensions."
#~ msgstr ""

#~ msgid "Now the system theme needs to be communicated from host to the sandbox."
#~ msgstr ""

#~ msgid ""
#~ "On X11, Gtk3 picks up themes from"
#~ " XSettings. Specifically, on GNOME, the "
#~ "GNOME XSettings daemon ``gsd-xsettings`` "
#~ "reads the DConf values and converts "
#~ "them into XSettings values. On GNOME,"
#~ " this should work by default provided"
#~ " ``gsd-xsettings`` is running."
#~ msgstr ""

#~ msgid ""
#~ "Once the theme is installed and "
#~ "exposed in the sandbox, depending on "
#~ "the toolkit/libraries used or the "
#~ "application, it will automatically be "
#~ "applied."
#~ msgstr ""

#~ msgid ""
#~ "If the theme is not available via"
#~ " Flatpak extensions or portal or "
#~ "xsettings support is lacking, Gtk and"
#~ " Qt applications will fallback to "
#~ "using Adwaita or the default Qt "
#~ "theme."
#~ msgstr ""

#~ msgid ""
#~ "In this case, either the theme "
#~ "needs to be packaged as an "
#~ "extension or the application needs to"
#~ " have permission to read the theme"
#~ " and Gtk or Qt settings from "
#~ "host, usually by giving it filesystem"
#~ " access. This is undesirable in most"
#~ " cases as it weakens the sandbox "
#~ "and reduces portability. The desktop "
#~ "environments should provide proper portal "
#~ "or XSettings daemon support."
#~ msgstr ""

#~ msgid ""
#~ "Appearance settings such as the "
#~ "Freedesktop color-scheme preference are "
#~ "also exposed similarly via the "
#~ "respective Settings portal. The application"
#~ " needs to support reading it and "
#~ "the proper portal backends are needed"
#~ " to be installed for this to "
#~ "work."
#~ msgstr ""

#~ msgid ""
#~ "Since Flatpak 0.8.8, host icons from "
#~ "``/usr/share/icons`` are exposed in the "
#~ "sandbox in ``/run/host/share/icons`` and "
#~ "``$XDG_DATA_HOME/icons`` in ``/run/host/user-"
#~ "share/icons``."
#~ msgstr ""

#~ msgid "``~/.icons`` is a legacy path, and should not be used."
#~ msgstr ""

#~ msgid ""
#~ "Flatpak exposes fonts from host to "
#~ "the sandbox and the runtime ships "
#~ "the default fontconfig from upstream."
#~ msgstr ""

#~ msgid ""
#~ "Fonts from ``/usr/share/fonts`` are exposed"
#~ " in ``/run/host/fonts``, ``/usr/local/share/fonts`` "
#~ "is exposed in ``/run/host/local-fonts`` "
#~ "and ``$XDG_DATA_HOME/fonts`` in ``/run/host/user-"
#~ "fonts``."
#~ msgstr ""

#~ msgid "``~/.fonts`` is a legacy path, and should not be used."
#~ msgstr ""

#~ msgid "Fontconfig config files from host are not exposed."
#~ msgstr ""

#~ msgid ""
#~ "Flatpak applications cannot directly use "
#~ "the system theme because flatpaks do "
#~ "not have access to data files or"
#~ " libraries in ``/usr`` (where system "
#~ "themes are typically located). The "
#~ "solution is to package themes as "
#~ "flatpaks; relying on the host to "
#~ "have the correct version for every "
#~ "flatpak defeats the portability benefits "
#~ "Flatpak provides. These themes are "
#~ "provided as :doc:`extension` to the "
#~ "Freedesktop runtime for Gtk3 themes and"
#~ " to the KDE runtime for Qt "
#~ "themes."
#~ msgstr ""

