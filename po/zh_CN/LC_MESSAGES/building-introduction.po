# ZiqiangXu <ziqiang_xu@yeah.net>, 2018. #zanata
msgid ""
msgstr ""
"Project-Id-Version: Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-20 10:17-0400\n"
"PO-Revision-Date: 2018-09-20 05:53+0000\n"
"Last-Translator: ZiqiangXu <ziqiang_xu@yeah.net>\n"
"Language-Team: Chinese (Simplified, China)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_Hans_CN\n"
"X-Generator: Zanata 4.6.2\n"
"Plural-Forms: nplurals=1; plural=0\n"

#: ../../building-introduction.rst:2
msgid "Building Introduction"
msgstr "构建介绍"

#: ../../building-introduction.rst:4
msgid ""
":doc:`first-build` has already provided a quick demonstration of how "
"applications get built with with Flatpak. This page provides an additional "
"general overview of what's involved."
msgstr ":doc:`first-build` 提供了一个如何用Flatpak构建应用的例子。 这个页面提供了一个额外的相关的概览"

#: ../../building-introduction.rst:7
msgid "flatpak-builder"
msgstr "flatpak-builder"

#: ../../building-introduction.rst:9
msgid ""
"``flatpak-builder`` is the primary tool for building Flatpak applications. "
"It allows you to take the source files for an application and build it into "
"a Flatpak application. It also allows multiple other dependencies to be "
"built at the same time, which get bundled into the build."
msgstr ""
"``flatpak-builder`` 是构建Flatpak应用的基础工具. "
"它允许您获取应用程序的源文件，并将其构建为一个Flatpak应用程序。它还允许同时构建多个其他依赖项，这些依赖项被捆绑到构建中。"

#: ../../building-introduction.rst:11
msgid ""
"The input to ``flatpak-builder`` is a manifest file. This specifies the "
"parameters for the application that will be built, such as its name and "
"which runtime it will depend on. The manifest also lists all the modules "
"that are to be built as part of the build process. A source for each module "
"can be specified, including links to file archives or version control "
"repositories. One of the modules (usually the last one) is the application "
"code itself."
msgstr ""
"输入给``flatpak-"
"builder``的是一个清单文件。它指定了要构建应用的参数，例如它的名字和依赖的运行时。这个清单还列出了作为构建过程的一部分构建的所有模块（不是很确定，译者注）。可以指定每个模块的源，包括指向文件存档或版本控制存储库的链接。某个模块（通常是最后一个）是应用代码它本身。"

#: ../../building-introduction.rst:13
msgid "The basic format used to invoke ``flatpak-builder`` is::"
msgstr "调用``flatpak-builder``的基本格式是:"

#: ../../building-introduction.rst:17
msgid ""
"Where ``<build-dir>`` is the path to the directory that the application will "
"be built into, and ``<manifest>`` is the path to a manifest file. The "
"contents of ``<directory>`` can be useful for testing and debugging "
"purposes, but is generally treated as an artifact of the build process."
msgstr ""
"其中``<build-"
"dir>``是应用要构建到的路径，``<manifest>``是清单文件的路径。``<directory>``的内容可以用于测试和调试，但是通常被试做构建过程中的一个工件（神器，译者注）。"

#: ../../building-introduction.rst:19
msgid "When ``flatpak-builder`` is run:"
msgstr "当``flatpak-builder``运行的时候："

#: ../../building-introduction.rst:21
msgid "The build directory is created, if it doesn't already exist"
msgstr "构建目录如果不存在则进行创建"

#: ../../building-introduction.rst:22
msgid "The source code for each module is downloaded and verified"
msgstr "下载和验证每个模块的源代码"

#: ../../building-introduction.rst:23
msgid "The source code for each module is built and installed"
msgstr "构建和安装每个模块的源代码"

#: ../../building-introduction.rst:24
msgid "The build is finished, by setting sandbox permissions"
msgstr "通过设置沙箱的权限来完成构建"

#: ../../building-introduction.rst:25
msgid ""
"The build result is exported to a repository (which will be created if it "
"doesn't exist already)"
msgstr "构建结果会被导出到仓库（如果不存在将会被创建）"

#: ../../building-introduction.rst:27
msgid "The application can then be installed from the repository and run."
msgstr "然后这个应用就可以从仓库进行安装和运行了"

#: ../../building-introduction.rst:30
msgid "Software Development Kits (SDKs)"
msgstr "软件开发套件（SDKs）"

#: ../../building-introduction.rst:32
msgid ""
"Instead of being built using the host environment, Flatpak applications are "
"built inside a separate environment, called an SDK."
msgstr "Flatpak应用是构建在一个称作SDK的隔离环境中的，而不是用主机的环境构建。"

#: ../../building-introduction.rst:34
msgid ""
"SDKs are like the regular runtime that applications run in. The difference "
"is that SDKs also include all the development resources and tools that are "
"required to build an application, such as build and packaging tools, header "
"files, compilers and debuggers."
msgstr ""
"这些SDK类似与应用所运行在的常规运行时。不同的是，这些SDK还包含了构建一个应用需要的所有开发资源和工具，例如构建和打包工具、头文件、编译器和调试器"

#: ../../building-introduction.rst:36
msgid ""
"Each runtime has an accompanying SDK. For example, there is both a GNOME 3."
"26 runtime and a GNOME 3.26 SDK. Applications that use the runtime are built "
"with the matching SDK."
msgstr ""
"每个运行时都有一个附带的SDK。例如，一个GNOME 3.26 runtime和一个GNOME 3.26 "
"SDK同时存在。使用这个运行时的是用这个对应的SDK构建的。"

#: ../../building-introduction.rst:38
msgid ""
"Like runtimes, SDKs will sometimes be automatically installed for you, but "
"if you do need to manually install them, they are installed in the same was "
"as applications and runtimes, such as::"
msgstr "和运行时一样，一般SDK会自动地进行安装。但是如果你需要手动安装他们，他们的安装和运行时的安装一样，例如："

