# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# TingPing <tingping@tingping.se>, 2018. #zanata
msgid ""
msgstr ""
"Project-Id-Version:  Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 01:10+0530\n"
"PO-Revision-Date: 2018-05-20 10:37-0400\n"
"Last-Translator: Copied by Zanata <copied-by-zanata@zanata.org>\n"
"Language: ko\n"
"Language-Team: ohpato <ohpato@hanmail.net>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../manifests.rst:2
msgid "Manifests"
msgstr "Manifest 파일들"

#: ../../manifests.rst:4
#, fuzzy
msgid ""
"The input to ``flatpak-builder`` is a JSON or YAML file that describes "
"the parameters for building an application, as well as instructions for "
"each of the modules that are to be built. This file is called the "
"manifest."
msgstr ""
"Manifest 파일은 플랫팩 빌더의 입력이며, 응용프로그램 빌드를 위한 매개변수 및 번들로 묶일 모듈들을 빌드하기 위한 방법을 "
"지시하는 JSON 파일이다."

#: ../../manifests.rst:8
msgid ""
"This page provides information and guidance on how to use manifests, "
"including an explanation of the most common parameters that can be "
"specified. It is recommended to have followed the :doc:`first-build` "
"tutorial before reading this section, and to be familiar with :doc"
":`flatpak-builder`."
msgstr ""

#: ../../manifests.rst:13
msgid ""
"Manifest files should be named using the application ID. For example, the"
" manifest file for GNOME Dictionary is named "
"``org.gnome.Dictionary.yml``. This page uses this manifest file for all "
"its examples."
msgstr ""

#: ../../manifests.rst:17
#, fuzzy
msgid ""
"A complete list of all the properties that can be specified in manifest "
"files can be found in the :doc:`flatpak-builder-command-reference`, as "
"well as the ``flatpak-manifest`` man page."
msgstr ""
"플랫팩의 manifest 파일 내에서 지정할 수 있는 각 속성에 관해서는 :doc:`플랫팩 빌더 명령어 레퍼런스` 또는 플랫팩 "
"빌더의 맨페이지를 참고한다."

#: ../../manifests.rst:22
msgid "Basic properties"
msgstr ""

#: ../../manifests.rst:24
msgid ""
"Each manifest file should specify basic information about the application"
" that is to be built, including the ``id``, ``runtime``, ``runtime-"
"version``, ``sdk`` and ``command`` parameters. These properties are "
"typically specified at the beginning of the file."
msgstr ""

#: ../../manifests.rst:29
msgid "For example, the GNOME Dictionary manifest includes:"
msgstr ""

#: ../../manifests.rst:39
msgid ""
"Specifying a runtime and runtime version allows that the runtime that is "
"needed by your application to be automatically installed on users' "
"systems."
msgstr ""

#: ../../manifests.rst:43
msgid "File renaming"
msgstr "파일 재명명"

#: ../../manifests.rst:45
msgid ""
"Exports are application files that are made available to the host, and "
"include things like the application's ``.desktop`` file and icon."
msgstr ""

#: ../../manifests.rst:48
msgid ""
"The names of files that are exported by a Flatpak must be prefixed using "
"the application ID, such as ``org.gnome.Dictionary.desktop``. The best "
"way to do this is to rename these files directly in the application's "
"source."
msgstr ""

#: ../../manifests.rst:52
msgid ""
"If renaming exported files to use the application ID is not possible, "
"``flatpak-builder`` allows them to be renamed as part of the build "
"process. This can be done by specifying one of the following properties "
"in the manifest:"
msgstr ""

#: ../../manifests.rst:57
msgid "``rename-icon`` - rename the application icon"
msgstr ""

#: ../../manifests.rst:58
msgid "``rename-desktop-file`` - rename the ``.desktop`` filename"
msgstr ""

#: ../../manifests.rst:59
msgid "``rename-appdata-file`` - rename the MetaInfo file"
msgstr ""

#: ../../manifests.rst:61
msgid ""
"Each of these properties accepts the name of the source file to be "
"renamed. ``flatpak-builder`` then automatically renames the file to match"
" the application ID. Note that this renaming method can introduce "
"internal naming conflicts, and that renaming files in tree is therefore "
"the most reliable approach."
msgstr ""

#: ../../manifests.rst:68
#, fuzzy
msgid "Finishing"
msgstr "finish-args"

#: ../../manifests.rst:70
msgid ""
"Applications that are run with Flatpak have extremely limited access to "
"the host environment by default, but applications require access to "
"resources outside of their sandbox in order to be useful. Finishing is "
"the build stage where the application's sandbox permissions are "
"specified, in order to give access to these resources."
msgstr ""

#: ../../manifests.rst:76
msgid ""
"The finishing manifest section uses the ``finish-args`` property, which "
"can be seen in the Dictionary manifest file:"
msgstr ""

#: ../../manifests.rst:94
msgid ""
"Guidance on which permissions to use can be found in the :doc:`sandbox-"
"permissions`."
msgstr ""

#: ../../manifests.rst:98
msgid "Cleanup"
msgstr "마무리 정리(Cleanup)"

#: ../../manifests.rst:100
msgid ""
"The cleanup property can be used to remove files produced by the build "
"process that are not wanted as part of the application, such as headers "
"or developer documentation. Two properties in the manifest file are used "
"for this. This can be either done for each modules in which case only "
"names created by that module will be matched or at the toplevel which "
"will match anything created in the entire manifest."
msgstr ""

#: ../../manifests.rst:107
msgid ""
"Items starting with `/` are taken to be relative to the prefix, so "
"``/include`` will cleanup ``/app/include``, otherwise it matches the "
"basename."
msgstr ""

#: ../../manifests.rst:111
msgid "First, a list of filename patterns can be included::"
msgstr ""

#: ../../manifests.rst:118
msgid ""
"A cleanup with ``*``, at the `module level` will cleanup all artifacts "
"built from that module. This is often useful for build dependencies of a "
"module that does not need to be shipped in the final Flatpak package::"
msgstr ""

#: ../../manifests.rst:125
msgid "The `cleanup-commands` property can be a list of cleanup commands::"
msgstr ""

#: ../../manifests.rst:130
msgid ""
"Note that, instead of cleaning up unnecessary files, it is often better "
"to build less components through ``config-opts, build-commands, make-"
"args``. For example, if the application does not need documentation files"
" or manpages, it's best to stop building them. This should make the build"
" faster in some cases and reduce the need for excessive cleanups."
msgstr ""

#: ../../manifests.rst:137
msgid "Modules"
msgstr ""

#: ../../manifests.rst:139
msgid ""
"The module list specifies each of the modules that are to be built as "
"part of the build process. One of these modules is the application "
"itself, and other modules are dependencies and libraries that are bundled"
" as part of the Flatpak. While simple applications may only specify one "
"or two modules, and therefore have short modules sections, some "
"applications can bundle numerous modules and therefore have lengthy "
"modules sections."
msgstr ""

#: ../../manifests.rst:146
msgid ""
"Modules are built in the order they are declared in the manifest. If any "
"module changes, that module and all the subsequent modules below it will "
"be rebuilt, otherwise it should use the cache."
msgstr ""

#: ../../manifests.rst:150
msgid ""
"The general recommendation is to place the \"main\" module, usually the "
"module for the main application as the last module in the manifest but if"
" there is a module which gets updated often and is independent from the "
"rest, that module can also be placed as the last module to avoid "
"rebuilding everything else."
msgstr ""

#: ../../manifests.rst:156
msgid ""
"Modules can either be nested to clearly show the dependency structure or "
"be linearly declared."
msgstr ""

#: ../../manifests.rst:236
msgid ""
"As can be seen, each listed module has a ``name`` (which can be freely "
"assigned) and a list of ``sources``. Each source has a ``type``, and "
"available types include:"
msgstr ""

#: ../../manifests.rst:240
msgid "``archive`` - ``.tar`` or ``.zip`` archive files"
msgstr ""

#: ../../manifests.rst:241
msgid "``git`` - Git repositories"
msgstr ""

#: ../../manifests.rst:242
msgid "``bzr`` - Bazaar repositories"
msgstr ""

#: ../../manifests.rst:243
msgid "``file`` - local/remote files (these are copied into the source directory)"
msgstr ""

#: ../../manifests.rst:244
msgid "``dir`` - local directories (these are copied into the source directory)"
msgstr ""

#: ../../manifests.rst:245
msgid ""
"``script`` - an array of shell commands (these are put in a shellscript "
"file)"
msgstr ""

#: ../../manifests.rst:247
msgid ""
"``shell`` - an array of shell commands that are run during source "
"extraction"
msgstr ""

#: ../../manifests.rst:248
msgid "``patch`` - a patch (are applied to the source directory)"
msgstr ""

#: ../../manifests.rst:249
msgid ""
"``extra-data`` - data that can be downloaded at install time; this can "
"include archive or package files"
msgstr ""

#: ../../manifests.rst:252
msgid ""
"Different properties are available for each source type, which are listed"
" in the :doc:`module-sources`."
msgstr ""

#: ../../manifests.rst:256
msgid "Supported build systems"
msgstr ""

#: ../../manifests.rst:258
msgid "Modules can be built with a variety of build systems, including:"
msgstr ""

#: ../../manifests.rst:260
msgid ""
"`autotools <https://www.gnu.org/software/automake/manual/html_node"
"/Autotools-Introduction.html>`_"
msgstr ""

#: ../../manifests.rst:261
msgid "`cmake <https://cmake.org/>`_"
msgstr ""

#: ../../manifests.rst:262
msgid "`cmake-ninja <https://cmake.org/cmake/help/v3.0/generator/Ninja.html>`_"
msgstr ""

#: ../../manifests.rst:263
msgid "`meson <https://mesonbuild.com/>`_"
msgstr ""

#: ../../manifests.rst:264
msgid "`qmake <https://doc.qt.io/qt-5/qmake-overview.html>`_"
msgstr ""

#: ../../manifests.rst:266
msgid ""
"A \"simple\" build method is also available, which allows a series of "
"commands to be specified."
msgstr ""

#: ../../manifests.rst:269
msgid ""
"Each of the above buildsystem sets up the installation prefix, libdir "
"etc. and runs a series of commands to configure (``meson setup``, or "
"``./autogen.sh, ./configure`` or ``cmake``), build, install (``ninja "
"install, make install`` etc.) and optionally run tests (``make check, "
"ninja test`` etc.)."
msgstr ""

#: ../../manifests.rst:275
msgid ""
"Thus they can also be achieved by using the ``simple`` buildsystem and "
"manually specifying the commands."
msgstr ""

#: ../../manifests.rst:280
msgid ""
"Using the proper buildsystem is almost always preferred rather than "
"manually handling the correct setup."
msgstr ""

#: ../../manifests.rst:283
msgid "An example is provided below."
msgstr ""

#: ../../manifests.rst:333
msgid "Shared Modules"
msgstr ""

#: ../../manifests.rst:335
msgid ""
"Flathub contains a `shared modules <https://github.com/flathub/shared-"
"modules>`_ repository containing build manifests for commonly used "
"modules. These are usally shared by apps on Flathub and maintained in a "
"single place. The repository is intended to be used as a git submodule."
msgstr ""

#: ../../manifests.rst:340
msgid ""
"Please see the `readme <https://github.com/flathub/shared-"
"modules/blob/master/README.md>`_ for details on how to use this."
msgstr ""

#: ../../manifests.rst:344
msgid "Flatpak Builder Tools"
msgstr ""

#: ../../manifests.rst:346
msgid ""
"`Flatpak Builder Tools (or flatpak-builder-tools) "
"<https://github.com/flatpak/flatpak-builder-tools>`_ is a collection of "
"scripts to aid using `flatpak-builder`. In this repository, each "
"directory contains instructions to generate a manifest for the respective"
" platform."
msgstr ""

#: ../../manifests.rst:349
msgid "Example manifests"
msgstr "Manifest 예제"

#: ../../manifests.rst:351
msgid ""
"Flathub hosts a large collection of applications and the respective "
"manifests can be browsed and searched via `GitHub "
"<https://github.com/flathub>`_."
msgstr ""

#~ msgid ""
#~ "Manifest files should be named using "
#~ "the application ID. For example, the "
#~ "manifest file for GNOME Dictionary is"
#~ " named ``org.gnome.Dictionary.json``. This page"
#~ " uses this manifest file, which was"
#~ " introduced in :doc:`first-build`, for "
#~ "all its examples."
#~ msgstr ""

#~ msgid ""
#~ "As was described in the "
#~ ":doc:`introduction`, exports are application "
#~ "files that are made available to "
#~ "the host, and include things like "
#~ "the application's ``.desktop`` file and "
#~ "icon."
#~ msgstr ""

#~ msgid ""
#~ "The names of files that are "
#~ "exported by a Flatpak must prefixed "
#~ "using the application ID, such as "
#~ "``org.gnome.Dictionary.desktop``. The best way "
#~ "to do this is to rename these "
#~ "files directly in the application's "
#~ "source."
#~ msgstr ""

#~ msgid ""
#~ "As was explained in :doc:`first-build`,"
#~ " these two finishing properties give "
#~ "the application access to the X11 "
#~ "display server and to the network. "
#~ "Guidance on which permissions to use "
#~ "can be found in :doc:`sandbox-"
#~ "permissions`, and a full list of "
#~ "``finish-args`` options can be found "
#~ "in :doc:`sandbox-permissions-reference`."
#~ msgstr ""

#~ msgid ""
#~ "The cleanup property can be used "
#~ "to remove files that are produced "
#~ "by the build process but which "
#~ "aren't wanted as part of the "
#~ "application, such as headers or "
#~ "developer documentation. Two properties in "
#~ "the manifest file are used for "
#~ "this. First, a list of filename "
#~ "patterns can be included::"
#~ msgstr ""

#~ msgid ""
#~ "`cmake-ninja "
#~ "<https://cmake.org/cmake/help/v3.0/generator/Ninja.html>`_, "
#~ "`meson <http://mesonbuild.com/>`_"
#~ msgstr ""

#~ msgid ""
#~ "A `complete manifest for GNOME "
#~ "Dictionary built from Git "
#~ "<https://github.com/flathub/org.gnome.Dictionary/blob/master/org.gnome.Dictionary.json>`_."
#~ " It is also possible to browse "
#~ "`all the manifests hosted by Flathub "
#~ "<https://github.com/flathub>`_."
#~ msgstr ""
#~ "`Git에서 받아 빌드하는 GNOME 사전용 manifest "
#~ "파일(완전판) "
#~ "<https://github.com/flathub/org.gnome.Dictionary/blob/master/org.gnome.Dictionary.json>`_)"
#~ " 및 `플랫허브에서 호스팅하는 모든 manifest 파일 "
#~ "<https://github.com/flathub>`_ 을 참고할만 하다."

#~ msgid "`meson <http://mesonbuild.com/>`_"
#~ msgstr ""

#~ msgid "``file`` - local file (these are copied into the source directory)"
#~ msgstr ""

#~ msgid "``dir`` - local directory (these are copied into the source directory)"
#~ msgstr ""

#~ msgid ""
#~ "Each manifest file should specify basic"
#~ " information about the application that "
#~ "is to be built, including the "
#~ "``app-id``, ``runtime``, ``runtime-version``, "
#~ "``sdk`` and ``command`` parameters. These "
#~ "properties are typically specified at "
#~ "the beginning of the file."
#~ msgstr ""

#~ msgid "``rename-appdata-file`` - rename the AppData file"
#~ msgstr ""

#~ msgid ""
#~ "Guidance on which permissions to use "
#~ "can be found in the :doc:`sandbox-"
#~ "permissions`, and a full list of "
#~ "``finish-args`` options can be found "
#~ "in :doc:`sandbox-permissions-reference`."
#~ msgstr ""

#~ msgid ""
#~ "If you're wondering about the last "
#~ "finish arg, see `this blog post "
#~ "<https://blogs.gnome.org/mclasen/2019/07/12/settings-in-a"
#~ "-sandbox-world/>`__."
#~ msgstr ""

#~ msgid ""
#~ "The cleanup property can be used "
#~ "to remove files produced by the "
#~ "build process that are not wanted "
#~ "as part of the application, such "
#~ "as headers or developer documentation. "
#~ "Two properties in the manifest file "
#~ "are used for this."
#~ msgstr ""

#~ msgid ""
#~ "The second cleanup property is a "
#~ "list of commands that are run "
#~ "during the cleanup phase::"
#~ msgstr "두 번째 속성은 마무리 정리 단계에서 실행될 명령어 리스트이다::"

#~ msgid ""
#~ "Cleanup properties can be set on a"
#~ " per-module basis, in which case "
#~ "only filenames that were created by "
#~ "that particular module will be matched."
#~ msgstr ""
#~ "마무리 정리를 위해 모듈단위로(per-module)로 속성을 "
#~ "설정할 수 있는데, 해당 모듈에 의해 생성된 파일들"
#~ " 중 속성을 통해 지정된 파일 이름에 해당하는 "
#~ "것이 있는지 비교하게 된다."

#~ msgid ""
#~ "Different properties are available for "
#~ "each source type, which are listed "
#~ "in the :doc:`flatpak-builder-command-"
#~ "reference`."
#~ msgstr ""

#~ msgid ""
#~ "GNOME Dictionary's modules section is "
#~ "short, since it just contains the "
#~ "application itself, and looks like:"
#~ msgstr ""

#~ msgid "the \"`Build API <https://github.com/cgwalters/build-api/>`_\""
#~ msgstr ""

#~ msgid ""
#~ "`Shared Modules (or shared-modules) "
#~ "<https://github.com/flathub/shared-modules>`_ is a"
#~ " repository containing various manifests to"
#~ " build common libraries. It is "
#~ "intended to be used as a git "
#~ "submodule."
#~ msgstr ""

#~ msgid "To add it to your repository, run this command:"
#~ msgstr ""

#~ msgid ""
#~ "Then, add whichever module you want. "
#~ "In this example, we will use "
#~ "`gtk2`:"
#~ msgstr ""

#~ msgid "To update the submodule, run this command:"
#~ msgstr ""

#~ msgid "To remove the submodule, run these commands:"
#~ msgstr ""

#~ msgid ""
#~ "A `complete manifest for GNOME "
#~ "Dictionary built from Git "
#~ "<https://github.com/flathub/org.gnome.Dictionary/blob/master/org.gnome.Dictionary.yml>`_."
#~ " It is also possible to browse "
#~ "`all the manifests hosted by Flathub "
#~ "<https://github.com/flathub>`_."
#~ msgstr ""

