# Flatpak Documentation
# Copyright (C) 2017, Flatpak Team
# This file is distributed under the same license as the Flatpak package.
# Baptiste Mille-Mathias <baptiste.millemathias@gmail.com>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-06-30 18:01+0200\n"
"PO-Revision-Date: 2018-03-06 13:56+0900\n"
"Last-Translator: Baptiste Mille-Mathias <baptiste.millemathias@gmail.com>\n"
"Language-Team: ohpato <ohpato@hanmail.net>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko_KR\n"
"X-Generator: Poedit 2.0.6\n"

#: ../../building-simple-apps.rst:2
msgid "Building Simple Apps"
msgstr "간단한 응용 빌드하기"

#: ../../building-simple-apps.rst:4
msgid "The ``flatpak`` utility provides a simple set of commands for building and distributing applications. These allow creating new Flatpaks, into which new or existing applications can be built."
msgstr "``flatpak`` 도구는 응용프로그램을 빌드하고 배포하기 위한 간단한 명령어들을 제공한다. 이를 이용하여 새로운 응용프로그램이나 기존 응용프로그램을 바탕으로 새로운 플랫팩들을 생성할 수 있다."

#: ../../building-simple-apps.rst:6
msgid "This section describes how to build a simple application which doesn't require any additional dependencies outside of the runtime it is built against. In order to complete the examples, you should have completed the steps in `Getting Setup <getting-setup.html>`_ first."
msgstr "이 섹션은 간단한 응용프로그램을 빌드하는 방법에 관하여 설명한다. 이 응용프로그램은 빌드하고난 뒤에는 실행시간에 추가적인 의존자원을 필요로 하지 않는다. 예제 실행을 위해 `환경 설정 하기 <getting-setup.html>`_ 를 참조하여 환경을 설정한다."

#: ../../building-simple-apps.rst:9
msgid "Creating an app"
msgstr "응용프로그램 생성하기"

#: ../../building-simple-apps.rst:11
msgid "To create an application, the first step is to use the ``build-init`` command. This creates a directory into which an application can be built, which contains the correct directory structure and a metadata file which contains information about the app. The format for build-init is::"
msgstr "응용프로그램을 생성하기 위해 우선 필요한 작업은 ``build-init`` 명령을 실행하는 것이다. ``build-init`` 은 응용프로그램이 빌드될 때 사용할 디렉토리를 생성한다. 이 디렉토리 아래에는 응용프로그램에 관한 정보를 담은 메타데이터(metadata) 및 해당 프로그램 실행을 위한 디렉토리 구조가 들어간다. 명령어 형식은 다음과 같다::"

#: ../../building-simple-apps.rst:15
msgid "DIRECTORY is the name of the directory that will be created to contain the application"
msgstr "DIRECTORY는 응용프로그램을 담아두기 위해 생성할 디렉토리 이름"

#: ../../building-simple-apps.rst:16
msgid "APPNAME is the D-Bus name of the application"
msgstr "APPNAME은 응용프로그램의 D-Bus 이름"

#: ../../building-simple-apps.rst:17
msgid "SDK is the name of the SDK that will be used to build the application"
msgstr "SDK는 응용프로그램 빌드 시 사용할 SDK의 이름"

#: ../../building-simple-apps.rst:18
msgid "RUNTIME is the name of the runtime that will be required by the application"
msgstr "RUNTIME은 응용프로그램 실행에 필요한 런타임의 이름"

#: ../../building-simple-apps.rst:19
msgid "BRANCH is typically the version of the SDK and runtime that will be used"
msgstr "BRANCH is typically the version of the SDK and runtime that will be used"

#: ../../building-simple-apps.rst:21
msgid "For example, to build the GNOME Dictionary application using the GNOME 3.22 SDK, the command would look like::"
msgstr "예를 들어, GNOME 3.22 SDK를 사용하는 GNOME 사전을 빌드하기 위해서는 다음과 같은 명령어가 필요하다::"

#: ../../building-simple-apps.rst:25
msgid "You can try this command now. In the next step we will build an application inside the resulting dictionary directory."
msgstr "명령어를 지금 실행 해 봐도 좋다. 다음 해야 할 일은 결과물 디렉토리, 즉 ``dictionary`` 내에서 응용프로그램을 빌드하는 것이다."

#: ../../building-simple-apps.rst:28
msgid "Building"
msgstr "응용프로그램 빌드"

#: ../../building-simple-apps.rst:30
msgid "``flatpak build`` is used to build an application using an SDK. This command is used to provide access to a sandbox. For example, the following will create a file inside the appdir sandbox (in the files directory)::"
msgstr "``flatpak build`` 는 SDK를 이용하여 응용프로그램을 빌드할 때 사용한다. 이 명령은 샌드박스로의 접근을 제공한다. 예를 들어, 아래와 같은 명령을 입력하여 `files` 디렉토리 아래의 `appdir` 샌드박스 내에 파일을 생성할 수 있다. ::"

#: ../../building-simple-apps.rst:34
msgid "(It is best to remove this file before continuing.)"
msgstr "(다음 단계 시험을 위해 방금 위에서 생성한 파일은 지우는 것이 좋다)"

#: ../../building-simple-apps.rst:36
msgid "The build command allows existing applications that have been made using the traditional configure, make, make install routine to be built inside a flatpak. You can try this using GNOME Dictionary. First, download the source files, extract them and switch to the resulting directory::"
msgstr "빌드 명령은 전통적인 빌드 방법(``configure``, ``make``, ``make install`` 루틴)을 사용하도록 개발된 기존 응용프로그램들을 플랫팩 내에서 빌드되도록 한다. GNOME 사전을 이용하여 시험해보자. 우선 소스파일을 다운받고 압축을 해제한 후 디렉토리로 이동하자::"

#: ../../building-simple-apps.rst:42
msgid "Then you can use the build command to build and install the source inside the dictionary directory that was previously made::"
msgstr "위에서 생성한 dictionary 디렉토리 내에서, 소스코드 빌드와 설치를 위한 명령어를 사용 해 볼 수 있다::"

#: ../../building-simple-apps.rst:49
msgid "Since these are run in a sandbox, the compiler and other tools from the SDK are used to build and install, rather than those on the host system."
msgstr "위의 명령어들은 샌드박스 내에서 실행되므로, 호스트 플랫폼이 제공하는 것이 아닌, SDK가 제공하는 컴파일러나 다른 도구들이 빌드와 설치에 사용된다."

#: ../../building-simple-apps.rst:52
msgid "Completing the build"
msgstr "빌드 완료"

#: ../../building-simple-apps.rst:54
msgid "Once an application has been built, the ``build-finish`` command needs to be used to specify access to different parts of the host, such as networking and graphics sockets. This command is also used to specify the command that is used to run the app (done by modifying the metadata file), and to create the application's exports directory. For example::"
msgstr "응용프로그램이 빌드되고난 후에는 ``build-finish`` 명령을 실행하여 네트워킹 그래픽 소켓 등 호스트의 각기 다른 부분에 관한 접근 규칙을 명세할 필요가 있다. 이 명령어는 또한 응용프로그램 실행을 위한 명령어를 명세하는데에 사용(메타데이터 파일에 변경이 일어난다)되고, 응용프로그램의 export 디렉토리도 생성한다::"

#: ../../building-simple-apps.rst:58
msgid "At this point you have successfully built a flatpak and prepared it to be run. To test the app, you need to export the Dictionary to a repository, add that repository and then install and run the app::"
msgstr "여기까지 성공적으로 실행했다면 여러분은 플랫팩을 성공적으로 빌드하고 실행 준비를 마친 셈이다. 응용프로그램 테스트를 위해 Dictionary 응용프로그램을 저장소에 내보내고(export), 해당 저장소를 추가한 후 설치 및 실행 해 보자::"

#: ../../building-simple-apps.rst:65
msgid "This exports the app, creates a repository called tutorial-repo, installs the Dictionary application in the per-user installation area and runs it."
msgstr "위 명령들은 응용프로그램을 저장소로 보내고, 개별 사용자용으로 `tutorial-repo` 라는 저장소를 생성하며, 개별 사용자 용으로 Dictionary 프로그램을 설치하고, 실행하는 명령어들이다."
