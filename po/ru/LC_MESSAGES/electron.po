# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# Dmitry <dmitrydmitry761@gmail.com>, 2021.
# Dmitry <dmitrydmitry761@gmail.com>, 2023.
msgid ""
msgstr ""
"Project-Id-Version:  Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 09:30+0530\n"
"PO-Revision-Date: 2023-02-04 00:21+0700\n"
"Last-Translator: Dmitry <dmitrydmitry761@gmail.com>\n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../electron.rst:2
msgid "Electron"
msgstr "Electron"

#: ../../electron.rst:4
#, fuzzy
msgid ""
"Due to the nature of `Electron <https://www.electronjs.org/>`_, building "
"Electron applications as Flatpaks requires a few extra steps compared "
"with other applications. Thankfully, several tools and resources are "
"available which make this much easier."
msgstr ""
"Из-за природы Electron создание приложений Electron в виде Flatpaks "
"требует нескольких дополнительных шагов по сравнению с другими "
"приложениями. К счастью, доступно несколько инструментов и ресурсов, "
"которые значительно упрощают эту задачу."

#: ../../electron.rst:9
msgid ""
"This guide provides information on how building Electron applications "
"differs from other applications. It also includes information on the "
"tooling for building Electron applications and how to use it."
msgstr ""
"В этом руководстве представлена информация о том, чем создание приложений"
" Electron отличается от других приложений. Он также включает информацию "
"об инструментах для создания приложений Electron и о том, как их "
"использовать."

#: ../../electron.rst:13
msgid ""
"The guide walks through the `manifest file <https://github.com/flathub"
"/electron-sample-app/blob/master/flatpak/org.flathub.electron-sample-"
"app.yml>`_ of the `sample Electron Flatpak application "
"<https://github.com/flathub/electron-sample-app>`_. Before you start, it "
"is a good idea to take a look at this, either online or by downloading "
"the application."
msgstr ""
"В руководстве рассматривается «файл манифеста <https://github.com/flathub"
"/electron-sample-app/blob/master/flatpak/org.flathub.electron-sample-"
"app.yml>`_ образца «Electron Приложение Flatpak "
"<https://github.com/flathub/electron-sample-app>`_. Прежде чем начать, "
"рекомендуется взглянуть на это в Интернете или загрузив приложение."

#: ../../electron.rst:22
msgid "Building the sample application"
msgstr "Сборка образца приложения"

#: ../../electron.rst:24
msgid ""
"While it isn't strictly necessary, you might want to try building and "
"running the sample application yourself."
msgstr ""
"Хотя в этом нет строгой необходимости, вы можете попробовать создать и "
"запустить образец приложения самостоятельно."

#: ../../electron.rst:27
#, fuzzy
msgid ""
"To get setup for the build, download or clone the sample app from GitHub,"
" and navigate to the ``/flatpak`` directory in the terminal. Then to "
"build::"
msgstr ""
"Чтобы настроить сборку, загрузите или клонируйте пример приложения с "
"GitHub и перейдите в каталог ``/flatpak`` в терминале. Вы также должны "
"установить базовое приложение Electron и расширение Node.js SDK::"

#: ../../electron.rst:33
msgid "Finally, the application can be run with::"
msgstr "Наконец, приложение можно запустить с::"

#: ../../electron.rst:38
msgid "Basic configuration"
msgstr "Базовая конфигурация"

#: ../../electron.rst:40
msgid ""
"The first part of the sample application's manifest specifies the "
"application's ID. It also configures the runtime and SDK:"
msgstr ""
"В первой части манифеста демонстрационного приложения указывается "
"идентификатор приложения. Он также настраивает среду выполнения и SDK:"

#: ../../electron.rst:50
msgid ""
"The Freedesktop runtime is generally the best runtime to use with "
"Electron applications, since it is the most minimal runtime, and other "
"dependencies will be specific to Electron itself."
msgstr ""
"Среда выполнения Freedesktop, как правило, является лучшей средой "
"выполнения для использования с приложениями Electron, поскольку это "
"минимальная среда выполнения, а другие зависимости будут специфичными для"
" самого Electron."

#: ../../electron.rst:55
#, fuzzy
msgid "The Electron BaseApp"
msgstr "Базовое приложение Electron"

#: ../../electron.rst:57
#, fuzzy
msgid ""
"Next, the manifest specifies that the Electron BaseApp should be used, by"
" specifying the ``base`` and ``base-version`` properties in the "
"application manifest:"
msgstr ""
"Затем в манифесте указывается, что следует использовать базовое "
"приложение Electron, путем указания свойств base и base-version в "
"манифесте приложения:"

#: ../../electron.rst:66
#, fuzzy
msgid ""
"BaseApps are described in :doc:`dependencies`. Using the Electron base "
"app is much faster and more convenient than manually building Electron "
"dependencies. It also has the advantage of reducing the amount of "
"duplication on users' machines, since it means that Electron is only "
"saved once on disk."
msgstr ""
"Базовые приложения описаны в :doc:`dependencies`. Использование базового "
"приложения Electron намного быстрее и удобнее, чем создание зависимостей "
"Electron вручную. Это также имеет то преимущество, что уменьшает "
"количество дублирований на машинах пользователей, поскольку это означает,"
" что Electron сохраняется на диске только один раз."

#: ../../electron.rst:72
msgid "The Node.js SDK extension"
msgstr "Расширение SDK для Node.js"

#: ../../electron.rst:74
msgid ""
"In order to build Electron-based apps, you need Node.js available at "
"build time. Flathub provides Node.js LTS versions as extensions for the "
"SDK, so you can install one of them and add it in your apps' manifest:"
msgstr ""
"Чтобы создавать приложения на основе Electron, вам понадобится Node.js, "
"доступный во время сборки. Flathub предоставляет версии LTS для Node.js в"
" качестве расширений для SDK, поэтому вы можете установить одну из них и "
"добавить ее в манифест приложений:"

#: ../../electron.rst:83
msgid "Enable the extension by adding it to ``PATH``:"
msgstr "Включите расширение, добавив его в «PATH»:"

#: ../../electron.rst:90
msgid ""
"Note that the extension name (last portion of reverse-dns notation, "
"``node18`` in this example) must be the same in ``sdk-extensions`` and "
"``append-path``."
msgstr ""
"Обратите внимание, что имя расширения (последняя часть нотации обратного "
"DNS, «node18» в этом примере) должно быть одинаковым в «sdk-extensions» и"
" «append-path»."

#: ../../electron.rst:94
msgid "Command"
msgstr "Command"

#: ../../electron.rst:96
msgid ""
"The ``command`` property indicates that a script called ``run.sh`` is to "
"be executed to run the application. This will be explained in further "
"detail later."
msgstr ""
"Свойство ``command`` указывает, что для запуска приложения должен быть "
"выполнен сценарий с именем ``run.sh``. Это будет объяснено более подробно"
" позже."

#: ../../electron.rst:105
msgid "Sandbox permissions"
msgstr "Разрешения песочницы"

#: ../../electron.rst:107
#, fuzzy
msgid ""
"The standard sandbox :ref:`sandbox-permissions:Permissions guidelines` "
"also apply to Electron applications. However, Electron's Wayland support "
"is still experimental. So for display access, only X11 should be used as "
"the default configuration. This will make Electron use Xwayland in a "
"Wayland session and nothing else is required."
msgstr ""
"Стандартные рекомендации по разрешениям песочницы применяются к "
"приложениям Electron. Однако Electron в настоящее время не поддерживает "
"Wayland, поэтому для доступа к дисплею следует использовать только X11. "
"Пример приложения также настраивает pulseaudio для звука и обеспечивает "
"доступ к сети:"

#: ../../electron.rst:113
msgid ""
"The sample app also configures PulseAudio for sound and enables network "
"access:"
msgstr ""

#: ../../electron.rst:126
msgid ""
"To allow experimental `native Wayland` support in Electron>=20, the "
"``--ozone-platform-hint=auto`` flag can be passed to the program. `auto` "
"will choose Wayland when the current session is running under Wayland and"
" Xwayland or X11 otherwise."
msgstr ""

#: ../../electron.rst:131
msgid ""
"It's recommended to leave actually `enabling` Wayland up to the user for "
"now, i.e. set ``--socket=x11`` in the manifest. Wayland can then be "
"tested with::"
msgstr ""

#: ../../electron.rst:137
msgid "Enable native Wayland support by default"
msgstr ""

#: ../../electron.rst:141
msgid ""
"Native Wayland support in Electron is still experimental and often "
"unstable. It is advised to stick with the X11/Xwayland configuration "
"above as the default."
msgstr ""

#: ../../electron.rst:145
msgid ""
"To make native Wayland the `default` for users, ``--socket=fallback-x11``"
" and ``--socket=wayland`` must be used in the manifest."
msgstr ""

#: ../../electron.rst:148
msgid ""
"For Electron versions between 17 and 27, client-side window decorations "
"under native Wayland can be enabled by passing ``--enable-"
"features=WaylandWindowDecorations`` to the program. For newer versions of"
" Electron , this isn't necessary anymore."
msgstr ""

#: ../../electron.rst:153
msgid ""
"Electron uses ``libnotify`` on Linux to provide desktop notifications. "
"`Since version 0.8.0 "
"<https://gitlab.gnome.org/GNOME/libnotify/-/merge_requests/27>`_ "
"libnotify automatically uses the `notification portal "
"<https://flatpak.github.io/xdg-desktop-portal/docs/doc-"
"org.freedesktop.portal.Notification.html>`_ when inside a sandboxed "
"environment and ``--talk-name=org.freedesktop.Notifications`` is not "
"required anymore. ``org.electronjs.Electron2.BaseApp`` includes "
"``libnotify>=0.8.0`` since ``branch/23.08``."
msgstr ""

#: ../../electron.rst:160
msgid ""
"To ensure proper mouse cursor scaling on HiDPI displays under Wayland, "
"the ``XCURSOR_PATH`` environment variable must be set to the host's "
"corresponding directories:"
msgstr ""

#: ../../electron.rst:172
msgid "Using correct desktop file name"
msgstr ""

#: ../../electron.rst:174
#, python-brace-format
msgid ""
"It's important for Linux applications to set the correct desktop file "
"name. If not, it can lead to problems like missing the window icon under "
"Wayland. By default Electron uses ``{appname}.desktop`` as desktop file "
"name. In Flatpak the name of the desktop file must be the id of the "
"Flatpak. To tell Electron to use another name you need to set the "
"``desktopName`` key in your ``package.json`` e.g. ``\"desktopName\": "
"\"com.example.MyApp.desktop\"``."
msgstr ""

#: ../../electron.rst:178
#, python-brace-format
msgid ""
"In case you repack a binary, you can use the ``patch-desktop-filename`` "
"script provided by the BaseApp. Each Electron binary ships with "
"``resources/app.asar`` file. You need to call ``patch-desktop-filename`` "
"with this file as argument. If your application is installed under "
"``${FLATPAK_DEST}/my-app`` you need to run ``patch-desktop-filename "
"${FLATPAK_DEST}/my-app/resources/app.asar``."
msgstr ""

#: ../../electron.rst:183
msgid "Build options"
msgstr "Варианты сборки"

#: ../../electron.rst:185
msgid ""
"These build options aren't strictly necessary, but can be useful if "
"something goes wrong. ``env`` allows setting an array of environment "
"variables, in this case we set ``NPM_CONFIG_LOGLEVEL`` to ``info`` so "
"that ``npm`` gives us more detailed error messages."
msgstr ""
"Эти параметры сборки не являются обязательными, но могут быть полезны, "
"если что-то пойдет не так. ``env`` позволяет установить массив переменных"
" среды, в этом случае мы устанавливаем ``NPM_CONFIG_LOGLEVEL`` на "
"``info``, чтобы ``npm`` давал нам более подробные сообщения об ошибках."

#: ../../electron.rst:201
msgid "The application module"
msgstr "Модуль приложения"

#: ../../electron.rst:203
msgid ""
"The final section of the manifest defines how the application module "
"should be built. This is where some of the additional logic for Electron "
"and Node.js can be found."
msgstr ""
"Последний раздел манифеста определяет, как должен быть построен модуль "
"приложения. Здесь можно найти дополнительную логику для Electron и "
"Node.js."

#: ../../electron.rst:207
msgid ""
"By default, ``flatpak-builder`` doesn't allow build tools to access the "
"network. This means that tools which rely on downloading sources will not"
" work. Therefore, Node.js packages must be downloaded prior to running "
"the build. Setting the  ``electron_config_cache`` environment variable "
"means that these will be found when it comes to the build."
msgstr ""
"По умолчанию ``flatpak-builder`` не разрешает инструментам сборки доступ "
"к сети. Это означает, что инструменты, которые полагаются на источники "
"загрузки, не будут работать. Поэтому пакеты Node.js необходимо загрузить "
"до запуска сборки. Установка переменной окружения  "
"``electronic_config_cache`` означает, что они будут найдены при сборке."

#: ../../electron.rst:213
msgid ""
"The next part of the manifest describes how the application should be "
"built. The simple buildsystem option is used, which allows a sequence of "
"commands to be specified, which are used for the build. The download "
"location and hash of the application are also specified."
msgstr ""
"Следующая часть манифеста описывает, как должно быть создано приложение. "
"Используется опция simple buildsystem, которая позволяет указать "
"последовательность команд, используемых для сборки. Также указывается "
"место загрузки и хеш приложения."

#: ../../electron.rst:236
msgid "Bundling NPM packages"
msgstr "Объединение пакетов NPM"

#: ../../electron.rst:238
msgid "The next line is how NPM modules get bundled as part of Flatpaks:"
msgstr ""
"В следующей строке показано, как модули NPM объединяются как часть "
"Flatpaks:"

#: ../../electron.rst:244
msgid ""
"Since even simple Node.js applications depend on dozens of packages, it "
"would be impractical to specify all of them as part of a manifest file. A"
" `Python script <https://github.com/flatpak/flatpak-builder-"
"tools/tree/master/node>`__ has therefore been developed to download "
"Node.js packages with NPM or Yarn and include them in an application's "
"sources."
msgstr ""
"Поскольку даже простые приложения Node.js зависят от десятков пакетов, "
"было бы нецелесообразно указывать их все как часть файла манифеста. "
"Поэтому был разработан `скрипт Python <https://github.com/flatpak"
"/flatpak-builder-tools/tree/master/node>`__ для загрузки пакетов Node.js "
"с помощью NPM или Yarn и включения их в исходный код приложения."

#: ../../electron.rst:250
msgid ""
"The Python script requires a ``package-lock.json`` (or ``yarn.lock``) "
"file. This file contains information about the packages that an "
"application depends on, and can be generated by running ``npm install "
"--package-lock-only`` from an application's root directory. The script is"
" then run as follows::"
msgstr ""
"Для скрипта Python требуется файл ``package-lock.json`` (или "
"``yarn.lock``). Этот файл содержит информацию о пакетах, от которых "
"зависит приложение, и может быть сгенерирован запуском ``npm install "
"--package-lock-only`` из корневого каталога приложения. Затем скрипт "
"запускается следующим образом::"

#: ../../electron.rst:257
msgid ""
"This generates the manifest JSON needed to build the NPM/Yarn packages "
"for the application, which are outputted to a file called ``generated-"
"sources.json``. The content of this file can be copied to the "
"application's manifest but, because it is often very long, it is often "
"best to link to it from the main manifest, which is done by adding "
"``generated-source.json`` as a line in the manifest section, as seen "
"above."
msgstr ""
"Это генерирует манифест JSON, необходимый для сборки пакетов NPM/Yarn для"
" приложения, которые выводятся в файл с именем ``generated-"
"sources.json``. Содержимое этого файла можно скопировать в манифест "
"приложения, но, поскольку он часто очень длинный, часто лучше сделать "
"ссылку на него из основного манифеста, что делается путем добавления "
"``generated-source.json`` в качестве строка в разделе манифеста, как "
"показано выше."

#: ../../electron.rst:265
msgid "Launching the app"
msgstr "Запуск приложения"

#: ../../electron.rst:267
#, fuzzy
msgid ""
"The Electron app is run through a simple shell script that wraps `zypak "
"<https://github.com/refi64/zypak>`_. This script can be given any name "
"but must be specified in the manifest's ``command`` property. See below "
"for a sample wrapper to launch the app:"
msgstr ""
"Приложение Electron запускается с помощью простого скрипта. Этому может "
"быть присвоено любое имя, но оно должно быть указано в свойстве "
"``\"command\":`` манифеста. Ниже приведен пример оболочки для запуска "
"приложения:"

#: ../../electron.rst:280
msgid "Build commands"
msgstr "Команды сборки"

#: ../../electron.rst:282
#, fuzzy
msgid ""
"Last but not least, since the ``simple`` buildsystem is being used, a "
"list of build commands must be provided. As can be seen, ``npm`` is run "
"with the ``npm_config_offline=true`` environment variable, installing "
"dependencies from packages that have already been cached. These are "
"copied to ``/app/main/``. Finally the ``run.sh`` script is installed to "
"``/app/bin/`` so that it will be on ``$PATH``:"
msgstr ""
"И последнее, но не менее важное: поскольку используется простая опция "
"сборки, необходимо предоставить список команд сборки. Как видно, ``npm`` "
"запускается с переменной среды ``npm_config_offline=true``, устанавливая "
"зависимости от пакетов, которые уже были кэшированы. Они копируются в "
"``/app/main/``. Наконец, скрипт ``run.sh`` устанавливается в "
"``/app/bin/``, так что он будет находиться в ``$PATH``:"

#: ../../electron.rst:304
msgid ""
"Note that if the application you are trying to package contains a "
"``build`` block in ``package.json`` with instructions for Linux, this can"
" cause ``electron-builder`` to try to fetch additional binaries at build-"
"time (Even if `--dir` option is used). The following example shows a "
"configuration that will try to download AppImage binaries:"
msgstr ""
"Обратите внимание: если приложение, которое вы пытаетесь упаковать, "
"содержит блок ``build`` в ``package.json`` с инструкциями для Linux, это "
"может  привести к тому, что ``electron-builder`` попытается получить "
"дополнительные двоичные файлыво время сборки. (Даже если используется "
"опция `--dir`). В следующем примере показана конфигурация, которая "
"попытается загрузить двоичные файлы AppImage:"

#: ../../electron.rst:314
msgid ""
"The preferred way of fixing this, is not a patch, but a build-time edit "
"using ``jq``. The following command will replace ``\"target\": "
"\"AppImage\"`` with ``\"target\": \"dir\"``:"
msgstr ""
"Предпочтительный способ исправить это - не патч, а редактирование во "
"время сборки с использованием ``jq``. Следующая команда заменит "
"``\"target\": \"AppImage\"`` на ``\"target\": \"dir\"``:"

#: ../../electron.rst:321
msgid "Make setProgressBar and setBadgeCount work"
msgstr ""

#: ../../electron.rst:322
msgid ""
"The `setProgressBar <https://www.electronjs.org/docs/latest/api/browser-"
"window#winsetprogressbarprogress-options>`_ and `setBadgeCount "
"<https://www.electronjs.org/docs/latest/api/app#appsetbadgecountcount-"
"linux-macos>`_ functions allow showing a progress bar and a badge count "
"in the window icon. It is implemented under Linux using the "
"`UnityLauncherAPI <https://wiki.ubuntu.com/Unity/LauncherAPI>`_. This API"
" is not implemented on every desktop environment. A known desktop "
"environment which implements this is KDE. It is also implemented by the "
"popular `Dash to Dock <https://micheleg.github.io/dash-to-dock>`_ GNOME "
"extension and `Plank <https://launchpad.net/plank>`_."
msgstr ""

#: ../../electron.rst:325
msgid ""
"To make it work in Flatpak, the app needs to :ref:`use the correct "
"desktop filename <use-correct-desktop-filename>` in its embedded "
"`package.json` file. The Flatpak also needs the ``--talk-"
"name=com.canonical.Unity`` permission. Electron versions earlier than v32"
" checks `checks if it's running on Unity or KDE "
"<https://github.com/electron/electron/blob/fb88375ab4d2161dbf7e958a2a94c7c6d97dc84c/shell/browser/linux/unity_service.cc#L64>`_"
" before using the UnityLauncherAPI."
msgstr ""

#~ msgid ""
#~ "Note that this base app is for "
#~ "projects using Electron 1.x.x, the most"
#~ " common version at the time of "
#~ "writing. Electron 2.x.x applications should"
#~ " use ``org.electronjs.Electron2.BaseApp`` instead."
#~ msgstr ""
#~ "Обратите внимание, что это базовое "
#~ "приложение предназначено для проектов, "
#~ "использующих Electron 1.x.x, наиболее "
#~ "распространенную версию на момент написания."
#~ " Приложения Electron 2.x.x должны "
#~ "использовать вместо этого "
#~ "``org.electronjs.Electron2.BaseApp``."

#~ msgid "Building Node.js"
#~ msgstr "Сборка Node.js"

#~ msgid ""
#~ "The next part of the manifest is"
#~ " the modules list. The Electron base"
#~ " app does not include Node.js, so "
#~ "it is necessary to build Node.js "
#~ "as a module.  This tutorial builds "
#~ "Node.js 8.11.1, as this version works"
#~ " with most projects at the time "
#~ "of writing, but make sure to use"
#~ " whichever version is best for your"
#~ " project."
#~ msgstr ""
#~ "Следующая часть манифеста - это список"
#~ " модулей. Базовое приложение Electron не"
#~ " включает Node.js, поэтому необходимо "
#~ "собрать Node.js как модуль.  В этом "
#~ "руководстве создается Node.js 8.11.1, так "
#~ "как эта версия работает с большинством"
#~ " проектов на момент написания, но "
#~ "убедитесь, что вы используете ту версию,"
#~ " которая лучше всего подходит для "
#~ "вашего проекта."

#~ msgid ""
#~ "Here, the cleanup step isn't strictly"
#~ " necessary. However, removing documentation "
#~ "helps to reduce final disk size of"
#~ " the bundle."
#~ msgstr ""
#~ "Здесь этап очистки не является строго"
#~ " необходимым. Однако удаление документации "
#~ "помогает уменьшить окончательный размер пакета"
#~ " на диске."

#~ msgid "Then you can run the build::"
#~ msgstr "Затем вы можете запустить сборку::"

#~ msgid ""
#~ "Client-side window decorations in native"
#~ " wayland can be enabled by passing"
#~ " ``--enable-features=WaylandWindowDecorations`` "
#~ "(Electron>=17)."
#~ msgstr ""

#~ msgid ""
#~ "To make it work in Flatpak, the"
#~ " app needs to :ref:`use the correct"
#~ " desktop filename <use-correct-desktop-"
#~ "filename>`. The Flatpak also needs the"
#~ " ``--talk-name=com.canonical.Unity`` permission. "
#~ "Electron versions earlier than v32 "
#~ "checks `checks if it's running on "
#~ "Unity or KDE "
#~ "<https://github.com/electron/electron/blob/fb88375ab4d2161dbf7e958a2a94c7c6d97dc84c/shell/browser/linux/unity_service.cc#L64>`_"
#~ " before using the UnityLauncherAPI."
#~ msgstr ""

#~ msgid ""
#~ "The sample app also configures "
#~ "pulseaudio for sound and enables network"
#~ " access."
#~ msgstr ""

#~ msgid ""
#~ "Native wayland support in electron is"
#~ " experimental and often unstable. It "
#~ "is advised to stick with the X11"
#~ " and Xwayland configuration above as "
#~ "the default."
#~ msgstr ""

#~ msgid ""
#~ "To enable experimental `native Wayland` "
#~ "support in Electron>=20, the ``--ozone-"
#~ "platform-hint=auto`` flag can be passed "
#~ "to the program. `auto` will choose "
#~ "Wayland when the session is wayland "
#~ "and Xwayland or X11 otherwise."
#~ msgstr ""

#~ msgid ""
#~ "The recommended option is to leave "
#~ "it to the user. So ``--socket=x11`` "
#~ "should be used in manifest and "
#~ "Wayland can be tested with::"
#~ msgstr ""

#~ msgid ""
#~ "To make native wayland the `default` "
#~ "for users ``--socket=fallback-x11`` and "
#~ "``--socket=wayland`` must be used in the"
#~ " manifest."
#~ msgstr ""

#~ msgid ""
#~ "For Electron versions between 17 and "
#~ "27, client-side window decorations in"
#~ " native wayland can be enabled by "
#~ "passing ``--enable-features=WaylandWindowDecorations``."
#~ msgstr ""

#~ msgid ""
#~ "Electron uses ``libnotify`` on Linux to"
#~ " provide desktop notifications. libnotify "
#~ "`since 0.8.0 "
#~ "<https://gitlab.gnome.org/GNOME/libnotify/-/merge_requests/27>`_ "
#~ "automatically uses the `notification portal"
#~ " <https://flatpak.github.io/xdg-desktop-portal/docs"
#~ "/doc-org.freedesktop.portal.Notification.html>`_ when "
#~ "inside a sandboxed environment and "
#~ "``--talk-name=org.freedesktop.Notifications`` is not"
#~ " required."
#~ msgstr ""

#~ msgid ""
#~ "``org.electronjs.Electron2.BaseApp`` since "
#~ "``branch/23.08`` comes with ``libnotify>=0.8.0``"
#~ msgstr ""

