# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# Dmitry <dmitrydmitry761@gmail.com>, 2021.
# Dmitry <dmitrydmitry761@gmail.com>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-14 17:03-0500\n"
"PO-Revision-Date: 2023-02-04 00:21+0700\n"
"Last-Translator: Dmitry <dmitrydmitry761@gmail.com>\n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n"
"%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0\n"

#: ../../electron.rst:2
msgid "Electron"
msgstr "Electron"

#: ../../electron.rst:4
msgid ""
"Due to the nature of Electron, building Electron applications as Flatpaks requires a few "
"extra steps compared with other applications. Thankfully, several tools and resources are "
"available which make this much easier."
msgstr ""
"Из-за природы Electron создание приложений Electron в виде Flatpaks требует нескольких "
"дополнительных шагов по сравнению с другими приложениями. К счастью, доступно несколько "
"инструментов и ресурсов, которые значительно упрощают эту задачу."

#: ../../electron.rst:8
msgid ""
"This guide provides information on how building Electron applications differs from other "
"applications. It also includes information on the tooling for building Electron "
"applications and how to use it."
msgstr ""
"В этом руководстве представлена информация о том, чем создание приложений Electron "
"отличается от других приложений. Он также включает информацию об инструментах для создания "
"приложений Electron и о том, как их использовать."

#: ../../electron.rst:12
msgid ""
"The guide walks through the `manifest file <https://github.com/flathub/electron-sample-app/"
"blob/master/flatpak/org.flathub.electron-sample-app.yml>`_ of the `sample Electron Flatpak "
"application <https://github.com/flathub/electron-sample-app>`_. Before you start, it is a "
"good idea to take a look at this, either online or by downloading the application."
msgstr ""
"В руководстве рассматривается «файл манифеста <https://github.com/flathub/electron-sample-"
"app/blob/master/flatpak/org.flathub.electron-sample-app.yml>`_ образца «Electron "
"Приложение Flatpak <https://github.com/flathub/electron-sample-app>`_. Прежде чем начать, "
"рекомендуется взглянуть на это в Интернете или загрузив приложение."

#: ../../electron.rst:21
msgid "Building the sample application"
msgstr "Сборка образца приложения"

#: ../../electron.rst:23
msgid ""
"While it isn't strictly necessary, you might want to try building and running the sample "
"application yourself."
msgstr ""
"Хотя в этом нет строгой необходимости, вы можете попробовать создать и запустить образец "
"приложения самостоятельно."

#: ../../electron.rst:26
msgid ""
"To get setup for the build, download or clone the sample app from GitHub, and navigate to "
"the ``/flatpak`` directory in the terminal. You must also install the Electron base app "
"and the Node.js SDK extension::"
msgstr ""
"Чтобы настроить сборку, загрузите или клонируйте пример приложения с GitHub и перейдите в "
"каталог ``/flatpak`` в терминале. Вы также должны установить базовое приложение Electron и "
"расширение Node.js SDK::"

#: ../../electron.rst:33
msgid "Then you can run the build::"
msgstr "Затем вы можете запустить сборку::"

#: ../../electron.rst:37
msgid "Finally, the application can be run with::"
msgstr "Наконец, приложение можно запустить с::"

#: ../../electron.rst:42
msgid "Basic configuration"
msgstr "Базовая конфигурация"

#: ../../electron.rst:44
msgid ""
"The first part of the sample application's manifest specifies the application's ID. It "
"also configures the runtime and SDK:"
msgstr ""
"В первой части манифеста демонстрационного приложения указывается идентификатор "
"приложения. Он также настраивает среду выполнения и SDK:"

#: ../../electron.rst:54
msgid ""
"The Freedesktop runtime is generally the best runtime to use with Electron applications, "
"since it is the most minimal runtime, and other dependencies will be specific to Electron "
"itself."
msgstr ""
"Среда выполнения Freedesktop, как правило, является лучшей средой выполнения для "
"использования с приложениями Electron, поскольку это минимальная среда выполнения, а "
"другие зависимости будут специфичными для самого Electron."

#: ../../electron.rst:59
msgid "The Electron base app"
msgstr "Базовое приложение Electron"

#: ../../electron.rst:61
msgid ""
"Next, the manifest specifies that the Electron base app should be used, by specifying the "
"``base`` and ``base-version`` properties in the application manifest:"
msgstr ""
"Затем в манифесте указывается, что следует использовать базовое приложение Electron, путем "
"указания свойств base и base-version в манифесте приложения:"

#: ../../electron.rst:70
msgid ""
"Base apps are described in :doc:`dependencies`.  Using the Electron base app is much "
"faster and more convenient than manually building Electron dependencies. It also has the "
"advantage of reducing the amount of duplication on users' machines, since it means that "
"Electron is only saved once on disk."
msgstr ""
"Базовые приложения описаны в :doc:`dependencies`. Использование базового приложения "
"Electron намного быстрее и удобнее, чем создание зависимостей Electron вручную. Это также "
"имеет то преимущество, что уменьшает количество дублирований на машинах пользователей, "
"поскольку это означает, что Electron сохраняется на диске только один раз."

#: ../../electron.rst:76
msgid "The Node.js SDK extension"
msgstr "Расширение SDK для Node.js"

#: ../../electron.rst:78
msgid ""
"In order to build Electron-based apps, you need Node.js available at build time. Flathub "
"provides Node.js LTS versions as extensions for the SDK, so you can install one of them "
"and add it in your apps' manifest:"
msgstr ""
"Чтобы создавать приложения на основе Electron, вам понадобится Node.js, доступный во время "
"сборки. Flathub предоставляет версии LTS для Node.js в качестве расширений для SDK, "
"поэтому вы можете установить одну из них и добавить ее в манифест приложений:"

#: ../../electron.rst:87
msgid "Enable the extension by adding it to ``PATH``:"
msgstr "Включите расширение, добавив его в «PATH»:"

#: ../../electron.rst:94
msgid ""
"Note that the extension name (last portion of reverse-dns notation, ``node18`` in this "
"example) must be the same in ``sdk-extensions`` and ``append-path``."
msgstr ""
"Обратите внимание, что имя расширения (последняя часть нотации обратного DNS, «node18» в "
"этом примере) должно быть одинаковым в «sdk-extensions» и «append-path»."

#: ../../electron.rst:98
msgid "Command"
msgstr "Command"

#: ../../electron.rst:100
msgid ""
"The ``command`` property indicates that a script called ``run.sh`` is to be executed to "
"run the application. This will be explained in further detail later."
msgstr ""
"Свойство ``command`` указывает, что для запуска приложения должен быть выполнен сценарий с "
"именем ``run.sh``. Это будет объяснено более подробно позже."

#: ../../electron.rst:109
msgid "Sandbox permissions"
msgstr "Разрешения песочницы"

#: ../../electron.rst:111
msgid ""
"The standard guidelines on sandbox permissions apply to Electron applications. However, "
"Electron does not currently support Wayland, so for display access, only X11 should be "
"used. The sample app also configures pulseaudio for sound and enables network access:"
msgstr ""
"Стандартные рекомендации по разрешениям песочницы применяются к приложениям Electron. "
"Однако Electron в настоящее время не поддерживает Wayland, поэтому для доступа к дисплею "
"следует использовать только X11. Пример приложения также настраивает pulseaudio для звука "
"и обеспечивает доступ к сети:"

#: ../../electron.rst:125
msgid "Build options"
msgstr "Варианты сборки"

#: ../../electron.rst:127
msgid ""
"These build options aren't strictly necessary, but can be useful if something goes wrong. "
"``env`` allows setting an array of environment variables, in this case we set "
"``NPM_CONFIG_LOGLEVEL`` to ``info`` so that ``npm`` gives us more detailed error messages."
msgstr ""
"Эти параметры сборки не являются обязательными, но могут быть полезны, если что-то пойдет "
"не так. ``env`` позволяет установить массив переменных среды, в этом случае мы "
"устанавливаем ``NPM_CONFIG_LOGLEVEL`` на ``info``, чтобы ``npm`` давал нам более подробные "
"сообщения об ошибках."

#: ../../electron.rst:143
msgid "The application module"
msgstr "Модуль приложения"

#: ../../electron.rst:145
msgid ""
"The final section of the manifest defines how the application module should be built. This "
"is where some of the additional logic for Electron and Node.js can be found."
msgstr ""
"Последний раздел манифеста определяет, как должен быть построен модуль приложения. Здесь "
"можно найти дополнительную логику для Electron и Node.js."

#: ../../electron.rst:149
msgid ""
"By default, ``flatpak-builder`` doesn't allow build tools to access the network. This "
"means that tools which rely on downloading sources will not work. Therefore, Node.js "
"packages must be downloaded prior to running the build. Setting the  "
"``electron_config_cache`` environment variable means that these will be found when it "
"comes to the build."
msgstr ""
"По умолчанию ``flatpak-builder`` не разрешает инструментам сборки доступ к сети. Это означает, "
"что инструменты, которые полагаются на источники загрузки, не будут работать. Поэтому "
"пакеты Node.js необходимо загрузить до запуска сборки. Установка переменной окружения  "
"``electronic_config_cache`` означает, что они будут найдены при сборке."

#: ../../electron.rst:155
msgid ""
"The next part of the manifest describes how the application should be built. The simple "
"buildsystem option is used, which allows a sequence of commands to be specified, which are "
"used for the build. The download location and hash of the application are also specified."
msgstr ""
"Следующая часть манифеста описывает, как должно быть создано приложение. Используется "
"опция simple buildsystem, которая позволяет указать последовательность команд, "
"используемых для сборки. Также указывается место загрузки и хеш приложения."

#: ../../electron.rst:178
msgid "Bundling NPM packages"
msgstr "Объединение пакетов NPM"

#: ../../electron.rst:180
msgid "The next line is how NPM modules get bundled as part of Flatpaks:"
msgstr "В следующей строке показано, как модули NPM объединяются как часть Flatpaks:"

#: ../../electron.rst:186
msgid ""
"Since even simple Node.js applications depend on dozens of packages, it would be "
"impractical to specify all of them as part of a manifest file. A `Python script <https://"
"github.com/flatpak/flatpak-builder-tools/tree/master/node>`__ has therefore been developed "
"to download Node.js packages with NPM or Yarn and include them in an application's sources."
msgstr ""
"Поскольку даже простые приложения Node.js зависят от десятков пакетов, было бы "
"нецелесообразно указывать их все как часть файла манифеста. Поэтому был разработан `скрипт "
"Python <https://github.com/flatpak/flatpak-builder-tools/tree/master/node>`__ для загрузки "
"пакетов Node.js с помощью NPM или Yarn и включения их в исходный код приложения."

#: ../../electron.rst:192
msgid ""
"The Python script requires a ``package-lock.json`` (or ``yarn.lock``) file. This file "
"contains information about the packages that an application depends on, and can be "
"generated by running ``npm install --package-lock-only`` from an application's root "
"directory. The script is then run as follows::"
msgstr ""
"Для скрипта Python требуется файл ``package-lock.json`` (или ``yarn.lock``). Этот файл "
"содержит информацию о пакетах, от которых зависит приложение, и может быть сгенерирован "
"запуском ``npm install --package-lock-only`` из корневого каталога приложения. Затем "
"скрипт запускается следующим образом::"

#: ../../electron.rst:199
msgid ""
"This generates the manifest JSON needed to build the NPM/Yarn packages for the "
"application, which are outputted to a file called ``generated-sources.json``. The content "
"of this file can be copied to the application's manifest but, because it is often very "
"long, it is often best to link to it from the main manifest, which is done by adding "
"``generated-source.json`` as a line in the manifest section, as seen above."
msgstr ""
"Это генерирует манифест JSON, необходимый для сборки пакетов NPM/Yarn для приложения, "
"которые выводятся в файл с именем ``generated-sources.json``. Содержимое этого файла можно "
"скопировать в манифест приложения, но, поскольку он часто очень длинный, часто лучше "
"сделать ссылку на него из основного манифеста, что делается путем добавления ``generated-"
"source.json`` в качестве строка в разделе манифеста, как показано выше."

#: ../../electron.rst:207
msgid "Launching the app"
msgstr "Запуск приложения"

#: ../../electron.rst:209
msgid ""
"The Electron app is run through a simple script. This can be given any name but must be "
"specified in the manifest's ``\"command\":`` property. See below a sample wrapper for "
"launching app:"
msgstr ""
"Приложение Electron запускается с помощью простого скрипта. Этому может быть присвоено "
"любое имя, но оно должно быть указано в свойстве ``\"command\":`` манифеста. Ниже приведен "
"пример оболочки для запуска приложения:"

#: ../../electron.rst:221
msgid "Build commands"
msgstr "Команды сборки"

#: ../../electron.rst:223
msgid ""
"Last but not least, since the simple build option is being used, a list of build commands "
"must be provided. As can be seen, ``npm`` is run with the ``npm_config_offline=true`` "
"environment variable, installing dependencies from packages that have already been cached. "
"These are copied to ``/app/main/``. Finally the ``run.sh`` script is installed to ``/app/"
"bin/`` so that it will be on ``$PATH``:"
msgstr ""
"И последнее, но не менее важное: поскольку используется простая опция сборки, необходимо "
"предоставить список команд сборки. Как видно, ``npm`` запускается с переменной среды "
"``npm_config_offline=true``, устанавливая зависимости от пакетов, которые уже были "
"кэшированы. Они копируются в ``/app/main/``. Наконец, скрипт ``run.sh`` устанавливается в "
"``/app/bin/``, так что он будет находиться в ``$PATH``:"

#: ../../electron.rst:245
msgid ""
"Note that if the application you are trying to package contains a ``build`` block in "
"``package.json`` with instructions for Linux, this can cause ``electron-builder`` to try "
"to fetch additional binaries at build-time (Even if `--dir` option is used). The following "
"example shows a configuration that will try to download AppImage binaries:"
msgstr ""
"Обратите внимание: если приложение, которое вы пытаетесь упаковать, содержит блок ``build`` в "
"``package.json`` с инструкциями для Linux, это может  привести к тому, что ``electron-builder`` "
"попытается получить дополнительные двоичные файлыво время сборки. (Даже если используется "
"опция `--dir`). В следующем примере показана конфигурация, которая попытается загрузить "
"двоичные файлы AppImage:"

#: ../../electron.rst:255
msgid ""
"The preferred way of fixing this, is not a patch, but a build-time edit using ``jq``. The "
"following command will replace ``\"target\": \"AppImage\"`` with ``\"target\": \"dir\"``:"
msgstr ""
"Предпочтительный способ исправить это - не патч, а редактирование во время сборки с "
"использованием ``jq``. Следующая команда заменит ``\"target\": \"AppImage\"`` на ``\"target"
"\": \"dir\"``:"

#~ msgid ""
#~ "Note that this base app is for projects using Electron 1.x.x, the most common version "
#~ "at the time of writing. Electron 2.x.x applications should use ``org.electronjs."
#~ "Electron2.BaseApp`` instead."
#~ msgstr ""
#~ "Обратите внимание, что это базовое приложение предназначено для проектов, использующих "
#~ "Electron 1.x.x, наиболее распространенную версию на момент написания. Приложения "
#~ "Electron 2.x.x должны использовать вместо этого ``org.electronjs.Electron2.BaseApp``."

#~ msgid "Building Node.js"
#~ msgstr "Сборка Node.js"

#~ msgid ""
#~ "The next part of the manifest is the modules list. The Electron base app does not "
#~ "include Node.js, so it is necessary to build Node.js as a module.  This tutorial builds "
#~ "Node.js 8.11.1, as this version works with most projects at the time of writing, but "
#~ "make sure to use whichever version is best for your project."
#~ msgstr ""
#~ "Следующая часть манифеста - это список модулей. Базовое приложение Electron не включает "
#~ "Node.js, поэтому необходимо собрать Node.js как модуль.  В этом руководстве создается "
#~ "Node.js 8.11.1, так как эта версия работает с большинством проектов на момент "
#~ "написания, но убедитесь, что вы используете ту версию, которая лучше всего подходит для "
#~ "вашего проекта."

#~ msgid ""
#~ "Here, the cleanup step isn't strictly necessary. However, removing documentation helps "
#~ "to reduce final disk size of the bundle."
#~ msgstr ""
#~ "Здесь этап очистки не является строго необходимым. Однако удаление документации "
#~ "помогает уменьшить окончательный размер пакета на диске."
