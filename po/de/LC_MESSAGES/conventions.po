# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, 2018, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# TingPing <tingping@tingping.se>, 2018. #zanata
# Markus Richter <semanticdesign@pm.me>, 2019. #zanata
msgid ""
msgstr ""
"Project-Id-Version:  Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-14 17:03-0500\n"
"PO-Revision-Date: 2019-06-26 05:18-0400\n"
"Last-Translator: Markus Richter <semanticdesign@pm.me>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../conventions.rst:2
msgid "Requirements & Conventions"
msgstr "Anforderungen & Konventionen"

#: ../../conventions.rst:4
msgid ""
"Flatpak deliberately makes as few requirements of applications as "
"possible. However, a small number of standard Linux desktop conventions "
"are expected, primarily to ensure that applications integrate with Linux "
"desktops and app centers. Developers might also encounter a small number "
"of Linux technical conventions."
msgstr ""

#: ../../conventions.rst:10
msgid ""
"Information on further desktop integration options can be found in :doc"
":`desktop-integration`."
msgstr ""

#: ../../conventions.rst:14
msgid "Expected Standards"
msgstr ""

#: ../../conventions.rst:16
msgid ""
"Applications that use Flatpak are generally expected to comply with the "
"following standards. Applications that have previously targeted the Linux"
" desktop will typically need to make very few (if any) changes to do "
"this."
msgstr ""

#: ../../conventions.rst:21
msgid "Application IDs"
msgstr ""

#: ../../conventions.rst:23
msgid ""
"As described in :doc:`using-flatpak`, Flatpak requires each application "
"to have a unique identifier, which has a form such as "
"``org.gnome.Dictionary``. The format is in reverse-DNS style so the first"
" section is a domain controlled by the project and the trailing section "
"represents the specific project. As will be seen below and in future "
"sections, this ID is expected to be used in a number of places. "
"Developers must follow the standard `D-Bus naming conventions "
"<https://dbus.freedesktop.org/doc/dbus-specification.html#message-"
"protocol-names>`_ when creating their own IDs. This format is already "
"recommended by the `Desktop File specification "
"<https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-"
"spec-latest.html#file-naming>`_ and `Appstream specification "
"<https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html"
"#sect-Metadata-GenericComponent>`_ also."
msgstr ""

#: ../../conventions.rst:38
msgid "For some practical examples of bad IDs"
msgstr ""

#: ../../conventions.rst:40
msgid "``org.example.desktop``"
msgstr ""

#: ../../conventions.rst:42
msgid ""
"This is a bad ID because the Appstream standard for legacy reasons treats"
" IDs ending with ``.desktop`` as a special case causing inconsistency. "
"For this same reason, ``.Desktop`` suffixes should not be used for newly "
"named applications. Don't hesitate to repeat the application name even if"
" it already is part of the domain name section of the identifier (eg. "
"``org.example.Example``)."
msgstr ""

#: ../../conventions.rst:47
msgid "``io.github.Foo``"
msgstr ""

#: ../../conventions.rst:49
msgid ""
"This is problematic because while ``foo.github.io`` may be unique to your"
" project it does not include a project specific identifier. This may "
"cause issues if another project creates ``io.github.Foo-Bar`` which "
"should be its own namespace but areas of ``flatpak`` may treat them "
"similar. A better ID would be ``io.github.foo.Foo`` even if its "
"redundant."
msgstr ""

#: ../../conventions.rst:54
msgid "``org.example-site.Foo``"
msgstr ""

#: ../../conventions.rst:56
msgid ""
"This ID is not valid according to the DBus specification. You can use "
"``org.example_site.Foo`` instead."
msgstr ""

#: ../../conventions.rst:58
msgid "``com.github.foo.Bar``"
msgstr ""

#: ../../conventions.rst:60
msgid ""
"While a project may be hosted on GitHub it does not have any control over"
" the ``github.com`` domain. Instead you should use ``io.github`` as shown"
" above."
msgstr ""

#: ../../conventions.rst:64
msgid "AppData files"
msgstr ""

#: ../../conventions.rst:65
msgid ""
"AppData files provide metadata about applications, which is used by "
"application stores (such as Flathub, GNOME Software and KDE Discover). "
"The `Freedesktop AppStream specification "
"<https://www.freedesktop.org/software/appstream/docs/>`_ provides a "
"complete reference for providing AppData."
msgstr ""

#: ../../conventions.rst:71
msgid ""
"AppData files should be named with the application ID and the "
"``.metainfo.xml`` file extension, and should be placed in "
"``/app/share/metainfo/``. For example::"
msgstr ""

#: ../../conventions.rst:76
msgid ""
"The ``appstream-util validate-relax`` command can be used to check "
"AppData files for errors."
msgstr ""

#: ../../conventions.rst:80
msgid "Application icons"
msgstr ""

#: ../../conventions.rst:82
msgid ""
"Applications are expected to provide an application icon, which is used "
"for their application launcher. These icons should be provided in "
"accordance with the `Freedesktop icon specification "
"<https://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-"
"latest.html>`_."
msgstr ""

#: ../../conventions.rst:87
msgid ""
"Icons should be named with the application's ID, be in either PNG or SVG "
"format, and must be placed in the standard location::"
msgstr ""

#: ../../conventions.rst:92
msgid ""
"For example, the path to the 128âœ•128px version of GNOME Dictionary's icon"
" is::"
msgstr ""

#: ../../conventions.rst:98
msgid "Desktop files"
msgstr ""

#: ../../conventions.rst:100
msgid ""
"Desktop files are used to provide the desktop environment with "
"information about each application. The `Freedesktop specification "
"<https://standards.freedesktop.org/desktop-entry-spec/latest/>`_ provides"
" a complete reference for writing desktop files, and `additional "
"information about them "
"<https://wiki.archlinux.org/index.php/desktop_entries>`_ is available "
"online."
msgstr ""

#: ../../conventions.rst:107
msgid ""
"Desktop files should be named with the application's ID, followed by the "
"``.desktop`` file extension, and should be placed in "
"``/app/share/applications/``. For example::"
msgstr ""

#: ../../conventions.rst:113
msgid ""
"A minimal desktop file should contain at least the application's *name*, "
"*exec* command, *type*, *icon* name and *categories*::"
msgstr ""

#: ../../conventions.rst:123
msgid ""
"The ``desktop-file-validate`` command can be used to check for errors in "
"desktop files."
msgstr ""

#: ../../conventions.rst:127
msgid "Exporting through extra-data"
msgstr ""

#: ../../conventions.rst:129
msgid ""
"Files downloaded through ``extra-data`` are only downloaded when "
"installing, as such they aren't yet available for ``flatpak-builder`` to "
"automatically export during the build process."
msgstr ""

#: ../../conventions.rst:131
msgid ""
"When using ``extra-data``, place any files that must be exported under "
"this location::"
msgstr ""

#: ../../conventions.rst:135
msgid ""
"For example, if GNOME Dictionary used ``extra-data`` to download a 96x96 "
"icon this would be its path::"
msgstr ""

#: ../../conventions.rst:140
msgid "Technical conventions"
msgstr ""

#: ../../conventions.rst:142
msgid ""
"The following are standard technical conventions used by Flatpak and "
"Linux desktops. Those with Linux experience will likely already be aware "
"of them. However, developers who are new to Linux might find some of this"
" information useful."
msgstr ""

#: ../../conventions.rst:148
msgid "D-Bus"
msgstr ""

#: ../../conventions.rst:150
msgid ""
"D-Bus is the standard IPC framework used on Linux desktops. A lot of "
"applications won't need to use it, but it is supported by Flatpak should "
"it be required."
msgstr ""

#: ../../conventions.rst:154
msgid ""
"D-Bus can be used for application launching and communicating with some "
"system services. Applications can also provide their own D-Bus services "
"(when doing this, the D-Bus service name is expected to be the same as "
"the application ID)."
msgstr ""

#: ../../conventions.rst:159
msgid "Filesystem layout"
msgstr ""

#: ../../conventions.rst:161
msgid ""
"Each Flatpak sandbox, which is the environment in which an application is"
" run, contains the filesystem of the application's runtime. This follows "
"`standard Linux filesystem conventions "
"<https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard>`_."
msgstr ""

#: ../../conventions.rst:166
msgid ""
"For example, the root of the sandbox contains the ``/etc`` directory for "
"configuration files and ``/usr`` for multi-user utilities and "
"applications. In addition to this, each sandbox contains a top-level "
"``/app`` directory, which is where the application's own files are "
"located."
msgstr ""

#: ../../conventions.rst:172
msgid "XDG base directories"
msgstr ""

#: ../../conventions.rst:174
msgid ""
"`XDG base directories <https://standards.freedesktop.org/basedir-spec"
"/basedir-spec-latest.html>`_ are standard locations for user-specific "
"application data. Popular toolkits provide convenience functions for "
"accessing XDG base directories. These include:"
msgstr ""

#: ../../conventions.rst:179
msgid "Electron: XDG base directories can be accessed with ``app.getPath``"
msgstr ""

#: ../../conventions.rst:180
msgid ""
"Glib: provides access to the XDG base directories through the "
"``g_get_user_cache_dir ()``, ``g_get_user_data_dir ()``, "
"``g_get_user_config_dir ()`` functions"
msgstr ""

#: ../../conventions.rst:183
msgid ""
"Qt: provides access to XDG base directories with the `QStandardPaths "
"Class <http://doc.qt.io/qt-5/qstandardpaths.html>`_"
msgstr ""

#: ../../conventions.rst:186
msgid ""
"However, applications that aren't using one of these toolkits can expect "
"to find their XDG base directories in the following locations:"
msgstr ""

#: ../../conventions.rst:190
msgid "Base directory"
msgstr ""

#: ../../conventions.rst:190
msgid "Usage"
msgstr ""

#: ../../conventions.rst:190
msgid "Default location"
msgstr ""

#: ../../conventions.rst:192
msgid "XDG_CONFIG_HOME"
msgstr ""

#: ../../conventions.rst:192
msgid "User-specific configuration files"
msgstr ""

#: ../../conventions.rst:192
msgid "~/.var/app/<app-id>/config"
msgstr ""

#: ../../conventions.rst:193
msgid "XDG_DATA_HOME"
msgstr ""

#: ../../conventions.rst:193
msgid "User-specific data"
msgstr ""

#: ../../conventions.rst:193
msgid "~/.var/app/<app-id>/data"
msgstr ""

#: ../../conventions.rst:194
msgid "XDG_CACHE_HOME"
msgstr ""

#: ../../conventions.rst:194
msgid "Non-essential user-specific data"
msgstr ""

#: ../../conventions.rst:194
msgid "~/.var/app/<app-id>/cache"
msgstr ""

#: ../../conventions.rst:197
msgid "For example, GNOME Dictionary will store user-specific data in::"
msgstr ""

#: ../../conventions.rst:201
msgid ""
"Note that applications can be configured to use non-default base "
"directory locations (see :doc:`sandbox-permissions`)."
msgstr ""

#~ msgid ""
#~ "As described in :doc:`using-flatpak`, "
#~ "Flatpak requires each application to "
#~ "have a unique identifier, which has "
#~ "a three-part form such as "
#~ "``org.gnome.Dictionary``. As will be seen "
#~ "below and in future sections, this "
#~ "ID is expected to be used in "
#~ "a number of places. Developers should"
#~ " follow the standard `D-Bus naming "
#~ "conventions <https://dbus.freedesktop.org/doc/dbus-"
#~ "specification.html#message-protocol-names>`_ when"
#~ " creating their own IDs. This format"
#~ " is already recommended by the "
#~ "`Desktop File specification  "
#~ "<https://specifications.freedesktop.org/desktop-entry-spec"
#~ "/desktop-entry-spec-latest.html#file-naming>`_"
#~ " and `Appstream specification  "
#~ "<https://www.freedesktop.org/software/appstream/docs/chap-"
#~ "Metadata.html#sect-Metadata-GenericComponent>`_ "
#~ "also."
#~ msgstr ""

#~ msgid ""
#~ "Qt: provides access to XDG base "
#~ "directories with the the `QStandardPaths "
#~ "Class <http://doc.qt.io/qt-5/qstandardpaths.html>`_"
#~ msgstr ""

