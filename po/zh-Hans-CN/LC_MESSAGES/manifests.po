# ZiqiangXu <ziqiang_xu@yeah.net>, 2018. #zanata
msgid ""
msgstr ""
"Project-Id-Version: Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-20 10:17-0400\n"
"PO-Revision-Date: 2018-10-05 03:45+0000\n"
"Last-Translator: ZiqiangXu <ziqiang_xu@yeah.net>\n"
"Language-Team: Chinese (Simplified, China)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_Hans_CN\n"
"X-Generator: Zanata 4.6.2\n"
"Plural-Forms: nplurals=1; plural=0\n"

#: ../../manifests.rst:2
msgid "Manifests"
msgstr "清单"

#: ../../manifests.rst:4
msgid ""
"The input to ``flatpak-builder`` is a JSON file that describes the "
"parameters for building an application, as well as instructions for each of "
"the modules that are to be built. This file is called the manifest."
msgstr ""
"``flatpack-builder``是一个JSON文件，用于描述构建一个应用的参数，以及构建每个模块所用的指令。这个文件被称为清单文件。"

#: ../../manifests.rst:6
msgid ""
"This page provides information and guidance on how to use manifests, "
"including an explanation of the most common parameters that can be specified."
" It is recommended to have followed the :doc:`first-build` tutorial before "
"reading this section, and to be familiar with :doc:`flatpak-builder`."
msgstr ""
"这个页面提供了如何使用清单文件的信息和指南，包括需要指定的最常用参数的详解。读这一章节之前要求已经学习过:doc:`first-"
"build`教程，而且熟悉:doc:`flatpak-builder`。"

#: ../../manifests.rst:8
msgid ""
"Manifest files should be named using the application ID. For example, the "
"manifest file for GNOME Dictionary is named ``org.gnome.Dictionary.json``. "
"This page uses this manifest file, which was introduced in :doc:`first-"
"build`, for all its examples."
msgstr ""
"清单文件应该使用应用ID命名。举个例子：GNOME Dictionary的清单文件应该命名为``org.gnome.Dictionary.json``."
"本页面使用这个清单文件，在:doc:`first-build`有对整个例子的介绍。"

#: ../../manifests.rst:10
msgid ""
"A complete list of all the properties that can be specified in manifest "
"files can be found in the :doc:`flatpak-builder-command-reference`, as well "
"as the ``flatpak-manifest`` man page."
msgstr ""
"一个完整的属性列表可以在清单文件中指明，可以在:doc:`flatpak-builder-command-reference`和``flatpak-"
"manifest``找到。"

#: ../../manifests.rst:13
msgid "Basic properties"
msgstr "基本属性"

#: ../../manifests.rst:15
msgid ""
"Each manifest file should specify basic information about the application "
"that is to be built, including the ``app-id``, ``runtime``, ``runtime-"
"version``, ``sdk`` and ``command`` parameters. These properties are "
"typically specified at the beginning of the file."
msgstr ""
"每个清单文件应该指明要构建应用的基本信息，包括``app-id``，``runtime``，``runtime-"
"version``，``sdk``和``command``。这些属性通常在文件的开头进行声明。"

#: ../../manifests.rst:17
msgid "For example, the GNOME Dictionary manifest includes:"
msgstr "举个例子，GNOME Dictionary的清单文件包含："

#: ../../manifests.rst:27
msgid ""
"Specifying a runtime and runtime version allows that the runtime that is "
"needed by your application to be automatically installed on users' systems."
msgstr "指明runtime和runtime版本可以在用户的系统上自动安装你的应用需要的运行时。"

#: ../../manifests.rst:30
msgid "File renaming"
msgstr "文件重命名"

#: ../../manifests.rst:32
msgid ""
"As was described in the :doc:`introduction`, exports are application files "
"that are made available to the host, and include things like the "
"application's ``.desktop`` file and icon."
msgstr "正如:doc:`introduction`中描述的，导出是对主机可用的应用文件，包含像``.desktop``文件和图标文件之类的。"

#: ../../manifests.rst:34
msgid ""
"The names of files that are exported by a Flatpak must prefixed using the "
"application ID, such as ``org.gnome.Dictionary.desktop``. The best way to do "
"this is to rename these files directly in the application's source."
msgstr ""
"flatpak导出的文件名字必须以应用ID为前缀，例如``org.gnome.Dictionary."
"desktop``。直接在应用源代码和资源中重命名这些文件是最佳方法。"

#: ../../manifests.rst:36
msgid ""
"If renaming exported files to use the application ID is not possible, "
"``flatpak-builder`` allows them to be renamed as part of the build process. "
"This can be done by specifying one of the following properties in the "
"manifest:"
msgstr ""
"如果无法使用应用ID重命名导出文件，``flatpak-builder``允许在构建过程中重命名。可以通过在清单文件中指明下面的属性来实现："

#: ../../manifests.rst:38
msgid "``rename-icon`` - rename the application icon"
msgstr "``rename-icon``- 重命名应用图标"

#: ../../manifests.rst:39
msgid "``rename-desktop-file`` - rename the ``.desktop`` filename"
msgstr "``rename-desktop-file`` - 重命名 ``.desktop``文件"

#: ../../manifests.rst:40
msgid "``rename-appdata-file`` - rename the AppData file"
msgstr "``rename-appdata-file`` - 重命名AppData文件"

#: ../../manifests.rst:42
msgid ""
"Each of these properties accepts the name of the source file to be renamed. "
"``flatpak-builder`` then automatically renames the file to match the "
"application ID. Note that this renaming method can introduce internal naming "
"conflicts, and that renaming files in tree is therefore the most reliable "
"approach."
msgstr ""
"每个属性都可以接受源文件重命名。``flatpak-"
"builder``会自动重命名他们以匹配应用ID。注意这种重命名方法可能产生内部命名冲突，所以在文件树中进行重命名是最可靠的方法。"

#: ../../manifests.rst:45
msgid "Finishing"
msgstr "Finishing"

#: ../../manifests.rst:47
msgid ""
"Applications that are run with Flatpak have extremely limited access to the "
"host environment by default, but applications require access to resources "
"outside of their sandbox in order to be useful. Finishing is the build stage "
"where the application's sandbox permissions are specified, in order to give "
"access to these resources."
msgstr ""
"flatpak应用默认运行在很有限的主机环境里面，但是应用需要访问沙箱之外的资源。finishing是用于指明应用沙箱权限的一步，用于访问外界资源。"

#: ../../manifests.rst:49
msgid ""
"The finishing manifest section uses the ``finish-args`` property, which can "
"be seen in the Dictionary manifest file:"
msgstr "finishing清单节点使用``finish-args``属性，可以在Dictionary的清单文件见到："

#: ../../manifests.rst:58
msgid ""
"As was explained in :doc:`first-build`, these two finishing properties give "
"the application access to the X11 display server and to the network. "
"Guidance on which permissions to use can be found in :doc:`sandbox-"
"permissions`, and a full list of ``finish-args`` options can be found in :"
"doc:`sandbox-permissions-reference`."
msgstr ""
"正如:doc:`first-build`中解释的，这两个finishing属性为应用授予X11显示服务和网络的权限。权限的使用指南可以在:doc:"
"`sandbox-permissions`中找到，一个完整的``finish-args``选项列表可以在:doc:`sandbox-"
"permissions-reference`中找到。"

#: ../../manifests.rst:61
msgid "Cleanup"
msgstr "cleanup"

#: ../../manifests.rst:63
msgid ""
"The cleanup property can be used to remove files that are produced by the "
"build process but which aren't wanted as part of the application, such as "
"headers or developer documentation. Two properties in the manifest file are "
"used for this. First, a list of filename patterns can be included::"
msgstr ""
"cleanup属性用于移除构建过程中产生的，却不想保留的文件，例如头文件或者开发文档。清单文件中两个参数用于这个操作。第一个，一个文件名模板列表::"

#: ../../manifests.rst:67
msgid ""
"The second cleanup property is a list of commands that are run during the "
"cleanup phase::"
msgstr "第二个cleanup属性是一系列命令，在cleanup阶段执行::"

#: ../../manifests.rst:71
msgid ""
"Cleanup properties can be set on a per-module basis, in which case only "
"filenames that were created by that particular module will be matched."
msgstr "cleanup属性可以根据每个模块进行设置，在这种情况下，只会匹配该特定的模块产生的文件名。"

#: ../../manifests.rst:74
msgid "Modules"
msgstr "模块"

#: ../../manifests.rst:76
msgid ""
"The module list specifies each of the modules that are to be built as part "
"of the build process. One of these modules is the application itself, and "
"other modules are dependencies and libraries that are bundled as part of the "
"Flatpak. While simple applications may only specify one or two modules, and "
"therefore have short modules sections, some applications can bundle numerous "
"modules and therefore have lengthy modules sections."
msgstr ""
"这个模块列表作为构建过程的一部分，指明了每个模块。其中一个模块是应用本身，其他的是依赖和库，作为flatpak的一部分进行绑定。当应用比较简单的时候，只有一到两个模块，因此有较短的模块节点，一些应用会有大量的模块需要绑定，因此会有较长的模块节点。"

#: ../../manifests.rst:78
msgid ""
"GNOME Dictionary's modules section is short, since it just contains the "
"application itself, and looks like:"
msgstr "GNOME Dictionary的模块节点是较短的，因为它仅仅包含应用本身，大概如下所示："

#: ../../manifests.rst:95
msgid ""
"As can be seen, each listed module has a ``name`` (which can be freely "
"assigned) and a list of ``sources``. Each source has a ``type``, and "
"available types include:"
msgstr ""
"可以看出，每个列出的模块有一个``name``（可以自由分配）和一个``sources``列表。每个source都有一个``type``，可用的type有："

#: ../../manifests.rst:97
msgid "``archive`` - ``.tar`` or ``.zip`` archive files"
msgstr "``archive`` - ``.tar`` or ``.zip`` 归档文件"

#: ../../manifests.rst:98
msgid "``git`` - Git repositories"
msgstr "``git`` - Git 仓库"

#: ../../manifests.rst:99
msgid "``bzr`` - Bazaar repositories"
msgstr "``bzr`` - Bazaar 仓库"

#: ../../manifests.rst:100
msgid "``file`` - local file (these are copied into the source directory)"
msgstr "``file`` - 本地文件（这些复制到源码目录）"

#: ../../manifests.rst:101
msgid ""
"``script`` - an array of shell commands (these are put in a shellscript "
"file)"
msgstr "``script`` - 一个shell命令数组（这些都被放在shell脚本文件里）"

#: ../../manifests.rst:102
msgid ""
"``shell`` -an array of shell commands that are run during source extraction"
msgstr "``shell`` -一个shell命令数组，在解压源代码的时候执行"

#: ../../manifests.rst:103
msgid "``patch`` - a patch (are applied to the source directory)"
msgstr "``patch`` - 补丁（用于源代码目录）"

#: ../../manifests.rst:104
#, fuzzy
msgid ""
"``extra-data`` - data that can be downloaded at install time; this can "
"include archive or package files"
msgstr "``extra-data`` - 在安装时下载的数据；可以包含归档文件或者package文件"

#: ../../manifests.rst:106
msgid ""
"Different properties are available for each source type, which are listed in "
"the :doc:`flatpak-builder-command-reference`."
msgstr "每种source类型有不同的属性，在:doc:`flatpak-builder-command-reference`列出了。"

#: ../../manifests.rst:109
msgid "Supported build systems"
msgstr "受支持的构建系统"

#: ../../manifests.rst:111
msgid "Modules can be built with a variety of build systems, including:"
msgstr "模块可以用多种构建系统构建，包含："

#: ../../manifests.rst:113
msgid ""
"`autotools <https://www.gnu.org/software/automake/manual/html_node/Autotools-"
"Introduction.html>`_"
msgstr ""
"`autotools <https://www.gnu.org/software/automake/manual/html_node/Autotools-"
"Introduction.html>`_"

#: ../../manifests.rst:114
msgid "`cmake <https://cmake.org/>`_"
msgstr "`cmake <https://cmake.org/>`_"

#: ../../manifests.rst:115
msgid ""
"`cmake-ninja <https://cmake.org/cmake/help/v3.0/generator/Ninja.html>`_, "
"`meson <http://mesonbuild.com/>`_"
msgstr ""
"`cmake-ninja <https://cmake.org/cmake/help/v3.0/generator/Ninja.html>`_, "
"`meson <http://mesonbuild.com/>`_"

#: ../../manifests.rst:116
msgid "the \"`Build API <https://github.com/cgwalters/build-api/>`_\""
msgstr "\"`Build API <https://github.com/cgwalters/build-api/>`_\""

#: ../../manifests.rst:118
msgid ""
"A \"simple\" build method is also available, which allows a series of "
"commands to be specified."
msgstr "一个“简单的”构建方法，需要指定一系列命令。"

#: ../../manifests.rst:121
msgid "Example manifests"
msgstr "实例清单文件"

#: ../../manifests.rst:123
msgid ""
"A `complete manifest for GNOME Dictionary built from Git <https://github.com/"
"flathub/org.gnome.Dictionary/blob/master/org.gnome.Dictionary.json>`_. It is "
"also possible to browse `all the manifests hosted by Flathub <https://github."
"com/flathub>`_."
msgstr ""
"一个 `完整的GNOME Dictionary清单文件<https://github.com/flathub/org.gnome.Dictionary/"
"blob/master/org.gnome.Dictionary.json>`_. It is also possible to browse `all "
"the manifests hosted by Flathub <https://github.com/flathub>`_."

